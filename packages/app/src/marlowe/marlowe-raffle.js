import*as t from"@dcspark/cardano-multiplatform-lib-browser";import*as e from"react";var r={736:(t,e,r)=>{var n;t=r.nmd(t);var o=function(t){var e=1e7,r=7,n=9007199254740992,i=g(n),u="0123456789abcdefghijklmnopqrstuvwxyz",a="function"==typeof BigInt;function s(t,e,r,n){return void 0===t?s[0]:void 0===e||10==+e&&!r?Q(t):H(t,e,r,n)}function f(t,e){this.value=t,this.sign=e,this.isSmall=!1}function c(t){this.value=t,this.sign=t<0,this.isSmall=!0}function l(t){this.value=t}function _(t){return-n<t&&t<n}function g(t){return t<1e7?[t]:t<1e14?[t%1e7,Math.floor(t/1e7)]:[t%1e7,Math.floor(t/1e7)%1e7,Math.floor(t/1e14)]}function p(t){h(t);var r=t.length;if(r<4&&N(t,i)<0)switch(r){case 0:return 0;case 1:return t[0];case 2:return t[0]+t[1]*e;default:return t[0]+(t[1]+t[2]*e)*e}return t}function h(t){for(var e=t.length;0===t[--e];);t.length=e+1}function d(t){for(var e=new Array(t),r=-1;++r<t;)e[r]=0;return e}function m(t){return t>0?Math.floor(t):Math.ceil(t)}function y(t,r){var n,o,i=t.length,u=r.length,a=new Array(i),s=0,f=e;for(o=0;o<u;o++)s=(n=t[o]+r[o]+s)>=f?1:0,a[o]=n-s*f;for(;o<i;)s=(n=t[o]+s)===f?1:0,a[o++]=n-s*f;return s>0&&a.push(s),a}function v(t,e){return t.length>=e.length?y(t,e):y(e,t)}function b(t,r){var n,o,i=t.length,u=new Array(i),a=e;for(o=0;o<i;o++)n=t[o]-a+r,r=Math.floor(n/a),u[o]=n-r*a,r+=1;for(;r>0;)u[o++]=r%a,r=Math.floor(r/a);return u}function w(t,r){var n,o,i=t.length,u=r.length,a=new Array(i),s=0,f=e;for(n=0;n<u;n++)(o=t[n]-s-r[n])<0?(o+=f,s=1):s=0,a[n]=o;for(n=u;n<i;n++){if(!((o=t[n]-s)<0)){a[n++]=o;break}o+=f,a[n]=o}for(;n<i;n++)a[n]=t[n];return h(a),a}function T(t,r,n){var o,i,u=t.length,a=new Array(u),s=-r,l=e;for(o=0;o<u;o++)i=t[o]+s,s=Math.floor(i/l),i%=l,a[o]=i<0?i+l:i;return"number"==typeof(a=p(a))?(n&&(a=-a),new c(a)):new f(a,n)}function S(t,r){var n,o,i,u,a=t.length,s=r.length,f=d(a+s),c=e;for(i=0;i<a;++i){u=t[i];for(var l=0;l<s;++l)n=u*r[l]+f[i+l],o=Math.floor(n/c),f[i+l]=n-o*c,f[i+l+1]+=o}return h(f),f}function x(t,r){var n,o,i=t.length,u=new Array(i),a=e,s=0;for(o=0;o<i;o++)n=t[o]*r+s,s=Math.floor(n/a),u[o]=n-s*a;for(;s>0;)u[o++]=s%a,s=Math.floor(s/a);return u}function L(t,e){for(var r=[];e-- >0;)r.push(0);return r.concat(t)}function J(t,e){var r=Math.max(t.length,e.length);if(r<=30)return S(t,e);r=Math.ceil(r/2);var n=t.slice(r),o=t.slice(0,r),i=e.slice(r),u=e.slice(0,r),a=J(o,u),s=J(n,i),f=J(v(o,n),v(u,i)),c=v(v(a,L(w(w(f,a),s),r)),L(s,2*r));return h(c),c}function E(t,r,n){return new f(t<e?x(r,t):S(r,g(t)),n)}function R(t){var r,n,o,i,u=t.length,a=d(u+u),s=e;for(o=0;o<u;o++){n=0-(i=t[o])*i;for(var f=o;f<u;f++)r=i*t[f]*2+a[o+f]+n,n=Math.floor(r/s),a[o+f]=r-n*s;a[o+u]=n}return h(a),a}function I(t,r){var n,o,i,u,a=t.length,s=d(a),f=e;for(i=0,n=a-1;n>=0;--n)i=(u=i*f+t[n])-(o=m(u/r))*r,s[n]=0|o;return[s,0|i]}function A(t,r){var n,o=Q(r);if(a)return[new l(t.value/o.value),new l(t.value%o.value)];var i,u=t.value,_=o.value;if(0===_)throw new Error("Cannot divide by zero");if(t.isSmall)return o.isSmall?[new c(m(u/_)),new c(u%_)]:[s[0],t];if(o.isSmall){if(1===_)return[t,s[0]];if(-1==_)return[t.negate(),s[0]];var y=Math.abs(_);if(y<e){i=p((n=I(u,y))[0]);var v=n[1];return t.sign&&(v=-v),"number"==typeof i?(t.sign!==o.sign&&(i=-i),[new c(i),new c(v)]):[new f(i,t.sign!==o.sign),new c(v)]}_=g(y)}var b=N(u,_);if(-1===b)return[s[0],t];if(0===b)return[s[t.sign===o.sign?1:-1],s[0]];n=u.length+_.length<=200?function(t,r){var n,o,i,u,a,s,f,c=t.length,l=r.length,_=e,g=d(r.length),h=r[l-1],m=Math.ceil(_/(2*h)),y=x(t,m),v=x(r,m);for(y.length<=c&&y.push(0),v.push(0),h=v[l-1],o=c-l;o>=0;o--){for(n=_-1,y[o+l]!==h&&(n=Math.floor((y[o+l]*_+y[o+l-1])/h)),i=0,u=0,s=v.length,a=0;a<s;a++)i+=n*v[a],f=Math.floor(i/_),u+=y[o+a]-(i-f*_),i=f,u<0?(y[o+a]=u+_,u=-1):(y[o+a]=u,u=0);for(;0!==u;){for(n-=1,i=0,a=0;a<s;a++)(i+=y[o+a]-_+v[a])<0?(y[o+a]=i+_,i=0):(y[o+a]=i,i=1);u+=i}g[o]=n}return y=I(y,m)[0],[p(g),p(y)]}(u,_):function(t,r){for(var n,o,i,u,a,s=t.length,f=r.length,c=[],l=[],_=e;s;)if(l.unshift(t[--s]),h(l),N(l,r)<0)c.push(0);else{i=l[(o=l.length)-1]*_+l[o-2],u=r[f-1]*_+r[f-2],o>f&&(i=(i+1)*_),n=Math.ceil(i/u);do{if(N(a=x(r,n),l)<=0)break;n--}while(n);c.push(n),l=w(l,a)}return c.reverse(),[p(c),p(l)]}(u,_),i=n[0];var T=t.sign!==o.sign,S=n[1],L=t.sign;return"number"==typeof i?(T&&(i=-i),i=new c(i)):i=new f(i,T),"number"==typeof S?(L&&(S=-S),S=new c(S)):S=new f(S,L),[i,S]}function N(t,e){if(t.length!==e.length)return t.length>e.length?1:-1;for(var r=t.length-1;r>=0;r--)if(t[r]!==e[r])return t[r]>e[r]?1:-1;return 0}function O(t){var e=t.abs();return!e.isUnit()&&(!!(e.equals(2)||e.equals(3)||e.equals(5))||!(e.isEven()||e.isDivisibleBy(3)||e.isDivisibleBy(5))&&(!!e.lesser(49)||void 0))}function F(t,e){for(var r,n,i,u=t.prev(),a=u,s=0;a.isEven();)a=a.divide(2),s++;t:for(n=0;n<e.length;n++)if(!t.lesser(e[n])&&!(i=o(e[n]).modPow(a,t)).isUnit()&&!i.equals(u)){for(r=s-1;0!=r;r--){if((i=i.square().mod(t)).isUnit())return!1;if(i.equals(u))continue t}return!1}return!0}f.prototype=Object.create(s.prototype),c.prototype=Object.create(s.prototype),l.prototype=Object.create(s.prototype),f.prototype.add=function(t){var e=Q(t);if(this.sign!==e.sign)return this.subtract(e.negate());var r=this.value,n=e.value;return e.isSmall?new f(b(r,Math.abs(n)),this.sign):new f(v(r,n),this.sign)},f.prototype.plus=f.prototype.add,c.prototype.add=function(t){var e=Q(t),r=this.value;if(r<0!==e.sign)return this.subtract(e.negate());var n=e.value;if(e.isSmall){if(_(r+n))return new c(r+n);n=g(Math.abs(n))}return new f(b(n,Math.abs(r)),r<0)},c.prototype.plus=c.prototype.add,l.prototype.add=function(t){return new l(this.value+Q(t).value)},l.prototype.plus=l.prototype.add,f.prototype.subtract=function(t){var e=Q(t);if(this.sign!==e.sign)return this.add(e.negate());var r=this.value,n=e.value;return e.isSmall?T(r,Math.abs(n),this.sign):function(t,e,r){var n;return N(t,e)>=0?n=w(t,e):(n=w(e,t),r=!r),"number"==typeof(n=p(n))?(r&&(n=-n),new c(n)):new f(n,r)}(r,n,this.sign)},f.prototype.minus=f.prototype.subtract,c.prototype.subtract=function(t){var e=Q(t),r=this.value;if(r<0!==e.sign)return this.add(e.negate());var n=e.value;return e.isSmall?new c(r-n):T(n,Math.abs(r),r>=0)},c.prototype.minus=c.prototype.subtract,l.prototype.subtract=function(t){return new l(this.value-Q(t).value)},l.prototype.minus=l.prototype.subtract,f.prototype.negate=function(){return new f(this.value,!this.sign)},c.prototype.negate=function(){var t=this.sign,e=new c(-this.value);return e.sign=!t,e},l.prototype.negate=function(){return new l(-this.value)},f.prototype.abs=function(){return new f(this.value,!1)},c.prototype.abs=function(){return new c(Math.abs(this.value))},l.prototype.abs=function(){return new l(this.value>=0?this.value:-this.value)},f.prototype.multiply=function(t){var r,n,o,i=Q(t),u=this.value,a=i.value,c=this.sign!==i.sign;if(i.isSmall){if(0===a)return s[0];if(1===a)return this;if(-1===a)return this.negate();if((r=Math.abs(a))<e)return new f(x(u,r),c);a=g(r)}return new f(-.012*(n=u.length)-.012*(o=a.length)+15e-6*n*o>0?J(u,a):S(u,a),c)},f.prototype.times=f.prototype.multiply,c.prototype._multiplyBySmall=function(t){return _(t.value*this.value)?new c(t.value*this.value):E(Math.abs(t.value),g(Math.abs(this.value)),this.sign!==t.sign)},f.prototype._multiplyBySmall=function(t){return 0===t.value?s[0]:1===t.value?this:-1===t.value?this.negate():E(Math.abs(t.value),this.value,this.sign!==t.sign)},c.prototype.multiply=function(t){return Q(t)._multiplyBySmall(this)},c.prototype.times=c.prototype.multiply,l.prototype.multiply=function(t){return new l(this.value*Q(t).value)},l.prototype.times=l.prototype.multiply,f.prototype.square=function(){return new f(R(this.value),!1)},c.prototype.square=function(){var t=this.value*this.value;return _(t)?new c(t):new f(R(g(Math.abs(this.value))),!1)},l.prototype.square=function(t){return new l(this.value*this.value)},f.prototype.divmod=function(t){var e=A(this,t);return{quotient:e[0],remainder:e[1]}},l.prototype.divmod=c.prototype.divmod=f.prototype.divmod,f.prototype.divide=function(t){return A(this,t)[0]},l.prototype.over=l.prototype.divide=function(t){return new l(this.value/Q(t).value)},c.prototype.over=c.prototype.divide=f.prototype.over=f.prototype.divide,f.prototype.mod=function(t){return A(this,t)[1]},l.prototype.mod=l.prototype.remainder=function(t){return new l(this.value%Q(t).value)},c.prototype.remainder=c.prototype.mod=f.prototype.remainder=f.prototype.mod,f.prototype.pow=function(t){var e,r,n,o=Q(t),i=this.value,u=o.value;if(0===u)return s[1];if(0===i)return s[0];if(1===i)return s[1];if(-1===i)return o.isEven()?s[1]:s[-1];if(o.sign)return s[0];if(!o.isSmall)throw new Error("The exponent "+o.toString()+" is too large.");if(this.isSmall&&_(e=Math.pow(i,u)))return new c(m(e));for(r=this,n=s[1];!0&u&&(n=n.times(r),--u),0!==u;)u/=2,r=r.square();return n},c.prototype.pow=f.prototype.pow,l.prototype.pow=function(t){var e=Q(t),r=this.value,n=e.value,o=BigInt(0),i=BigInt(1),u=BigInt(2);if(n===o)return s[1];if(r===o)return s[0];if(r===i)return s[1];if(r===BigInt(-1))return e.isEven()?s[1]:s[-1];if(e.isNegative())return new l(o);for(var a=this,f=s[1];(n&i)===i&&(f=f.times(a),--n),n!==o;)n/=u,a=a.square();return f},f.prototype.modPow=function(t,e){if(t=Q(t),(e=Q(e)).isZero())throw new Error("Cannot take modPow with modulus 0");var r=s[1],n=this.mod(e);for(t.isNegative()&&(t=t.multiply(s[-1]),n=n.modInv(e));t.isPositive();){if(n.isZero())return s[0];t.isOdd()&&(r=r.multiply(n).mod(e)),t=t.divide(2),n=n.square().mod(e)}return r},l.prototype.modPow=c.prototype.modPow=f.prototype.modPow,f.prototype.compareAbs=function(t){var e=Q(t),r=this.value,n=e.value;return e.isSmall?1:N(r,n)},c.prototype.compareAbs=function(t){var e=Q(t),r=Math.abs(this.value),n=e.value;return e.isSmall?r===(n=Math.abs(n))?0:r>n?1:-1:-1},l.prototype.compareAbs=function(t){var e=this.value,r=Q(t).value;return(e=e>=0?e:-e)===(r=r>=0?r:-r)?0:e>r?1:-1},f.prototype.compare=function(t){if(t===1/0)return-1;if(t===-1/0)return 1;var e=Q(t),r=this.value,n=e.value;return this.sign!==e.sign?e.sign?1:-1:e.isSmall?this.sign?-1:1:N(r,n)*(this.sign?-1:1)},f.prototype.compareTo=f.prototype.compare,c.prototype.compare=function(t){if(t===1/0)return-1;if(t===-1/0)return 1;var e=Q(t),r=this.value,n=e.value;return e.isSmall?r==n?0:r>n?1:-1:r<0!==e.sign?r<0?-1:1:r<0?1:-1},c.prototype.compareTo=c.prototype.compare,l.prototype.compare=function(t){if(t===1/0)return-1;if(t===-1/0)return 1;var e=this.value,r=Q(t).value;return e===r?0:e>r?1:-1},l.prototype.compareTo=l.prototype.compare,f.prototype.equals=function(t){return 0===this.compare(t)},l.prototype.eq=l.prototype.equals=c.prototype.eq=c.prototype.equals=f.prototype.eq=f.prototype.equals,f.prototype.notEquals=function(t){return 0!==this.compare(t)},l.prototype.neq=l.prototype.notEquals=c.prototype.neq=c.prototype.notEquals=f.prototype.neq=f.prototype.notEquals,f.prototype.greater=function(t){return this.compare(t)>0},l.prototype.gt=l.prototype.greater=c.prototype.gt=c.prototype.greater=f.prototype.gt=f.prototype.greater,f.prototype.lesser=function(t){return this.compare(t)<0},l.prototype.lt=l.prototype.lesser=c.prototype.lt=c.prototype.lesser=f.prototype.lt=f.prototype.lesser,f.prototype.greaterOrEquals=function(t){return this.compare(t)>=0},l.prototype.geq=l.prototype.greaterOrEquals=c.prototype.geq=c.prototype.greaterOrEquals=f.prototype.geq=f.prototype.greaterOrEquals,f.prototype.lesserOrEquals=function(t){return this.compare(t)<=0},l.prototype.leq=l.prototype.lesserOrEquals=c.prototype.leq=c.prototype.lesserOrEquals=f.prototype.leq=f.prototype.lesserOrEquals,f.prototype.isEven=function(){return 0==(1&this.value[0])},c.prototype.isEven=function(){return 0==(1&this.value)},l.prototype.isEven=function(){return(this.value&BigInt(1))===BigInt(0)},f.prototype.isOdd=function(){return 1==(1&this.value[0])},c.prototype.isOdd=function(){return 1==(1&this.value)},l.prototype.isOdd=function(){return(this.value&BigInt(1))===BigInt(1)},f.prototype.isPositive=function(){return!this.sign},c.prototype.isPositive=function(){return this.value>0},l.prototype.isPositive=c.prototype.isPositive,f.prototype.isNegative=function(){return this.sign},c.prototype.isNegative=function(){return this.value<0},l.prototype.isNegative=c.prototype.isNegative,f.prototype.isUnit=function(){return!1},c.prototype.isUnit=function(){return 1===Math.abs(this.value)},l.prototype.isUnit=function(){return this.abs().value===BigInt(1)},f.prototype.isZero=function(){return!1},c.prototype.isZero=function(){return 0===this.value},l.prototype.isZero=function(){return this.value===BigInt(0)},f.prototype.isDivisibleBy=function(t){var e=Q(t);return!e.isZero()&&(!!e.isUnit()||(0===e.compareAbs(2)?this.isEven():this.mod(e).isZero()))},l.prototype.isDivisibleBy=c.prototype.isDivisibleBy=f.prototype.isDivisibleBy,f.prototype.isPrime=function(e){var r=O(this);if(r!==t)return r;var n=this.abs(),i=n.bitLength();if(i<=64)return F(n,[2,3,5,7,11,13,17,19,23,29,31,37]);for(var u=Math.log(2)*i.toJSNumber(),a=Math.ceil(!0===e?2*Math.pow(u,2):u),s=[],f=0;f<a;f++)s.push(o(f+2));return F(n,s)},l.prototype.isPrime=c.prototype.isPrime=f.prototype.isPrime,f.prototype.isProbablePrime=function(e,r){var n=O(this);if(n!==t)return n;for(var i=this.abs(),u=e===t?5:e,a=[],s=0;s<u;s++)a.push(o.randBetween(2,i.minus(2),r));return F(i,a)},l.prototype.isProbablePrime=c.prototype.isProbablePrime=f.prototype.isProbablePrime,f.prototype.modInv=function(t){for(var e,r,n,i=o.zero,u=o.one,a=Q(t),s=this.abs();!s.isZero();)e=a.divide(s),r=i,n=a,i=u,a=s,u=r.subtract(e.multiply(u)),s=n.subtract(e.multiply(s));if(!a.isUnit())throw new Error(this.toString()+" and "+t.toString()+" are not co-prime");return-1===i.compare(0)&&(i=i.add(t)),this.isNegative()?i.negate():i},l.prototype.modInv=c.prototype.modInv=f.prototype.modInv,f.prototype.next=function(){var t=this.value;return this.sign?T(t,1,this.sign):new f(b(t,1),this.sign)},c.prototype.next=function(){var t=this.value;return t+1<n?new c(t+1):new f(i,!1)},l.prototype.next=function(){return new l(this.value+BigInt(1))},f.prototype.prev=function(){var t=this.value;return this.sign?new f(b(t,1),!0):T(t,1,this.sign)},c.prototype.prev=function(){var t=this.value;return t-1>-n?new c(t-1):new f(i,!0)},l.prototype.prev=function(){return new l(this.value-BigInt(1))};for(var k=[1];2*k[k.length-1]<=e;)k.push(2*k[k.length-1]);var C=k.length,M=k[C-1];function P(t){return Math.abs(t)<=e}function U(t,e,r){e=Q(e);for(var n=t.isNegative(),i=e.isNegative(),u=n?t.not():t,a=i?e.not():e,s=0,f=0,c=null,l=null,_=[];!u.isZero()||!a.isZero();)s=(c=A(u,M))[1].toJSNumber(),n&&(s=M-1-s),f=(l=A(a,M))[1].toJSNumber(),i&&(f=M-1-f),u=c[0],a=l[0],_.push(r(s,f));for(var g=0!==r(n?1:0,i?1:0)?o(-1):o(0),p=_.length-1;p>=0;p-=1)g=g.multiply(M).add(o(_[p]));return g}f.prototype.shiftLeft=function(t){var e=Q(t).toJSNumber();if(!P(e))throw new Error(String(e)+" is too large for shifting.");if(e<0)return this.shiftRight(-e);var r=this;if(r.isZero())return r;for(;e>=C;)r=r.multiply(M),e-=C-1;return r.multiply(k[e])},l.prototype.shiftLeft=c.prototype.shiftLeft=f.prototype.shiftLeft,f.prototype.shiftRight=function(t){var e,r=Q(t).toJSNumber();if(!P(r))throw new Error(String(r)+" is too large for shifting.");if(r<0)return this.shiftLeft(-r);for(var n=this;r>=C;){if(n.isZero()||n.isNegative()&&n.isUnit())return n;n=(e=A(n,M))[1].isNegative()?e[0].prev():e[0],r-=C-1}return(e=A(n,k[r]))[1].isNegative()?e[0].prev():e[0]},l.prototype.shiftRight=c.prototype.shiftRight=f.prototype.shiftRight,f.prototype.not=function(){return this.negate().prev()},l.prototype.not=c.prototype.not=f.prototype.not,f.prototype.and=function(t){return U(this,t,(function(t,e){return t&e}))},l.prototype.and=c.prototype.and=f.prototype.and,f.prototype.or=function(t){return U(this,t,(function(t,e){return t|e}))},l.prototype.or=c.prototype.or=f.prototype.or,f.prototype.xor=function(t){return U(this,t,(function(t,e){return t^e}))},l.prototype.xor=c.prototype.xor=f.prototype.xor;var B=1<<30,W=(e&-e)*(e&-e)|B;function j(t){var r=t.value,n="number"==typeof r?r|B:"bigint"==typeof r?r|BigInt(B):r[0]+r[1]*e|W;return n&-n}function q(t,e){if(e.compareTo(t)<=0){var r=q(t,e.square(e)),n=r.p,i=r.e,u=n.multiply(e);return u.compareTo(t)<=0?{p:u,e:2*i+1}:{p:n,e:2*i}}return{p:o(1),e:0}}function D(t,e){return t=Q(t),e=Q(e),t.greater(e)?t:e}function z(t,e){return t=Q(t),e=Q(e),t.lesser(e)?t:e}function G(t,e){if(t=Q(t).abs(),e=Q(e).abs(),t.equals(e))return t;if(t.isZero())return e;if(e.isZero())return t;for(var r,n,o=s[1];t.isEven()&&e.isEven();)r=z(j(t),j(e)),t=t.divide(r),e=e.divide(r),o=o.multiply(r);for(;t.isEven();)t=t.divide(j(t));do{for(;e.isEven();)e=e.divide(j(e));t.greater(e)&&(n=e,e=t,t=n),e=e.subtract(t)}while(!e.isZero());return o.isUnit()?t:t.multiply(o)}f.prototype.bitLength=function(){var t=this;return t.compareTo(o(0))<0&&(t=t.negate().subtract(o(1))),0===t.compareTo(o(0))?o(0):o(q(t,o(2)).e).add(o(1))},l.prototype.bitLength=c.prototype.bitLength=f.prototype.bitLength;var H=function(t,e,r,n){r=r||u,t=String(t),n||(t=t.toLowerCase(),r=r.toLowerCase());var o,i=t.length,a=Math.abs(e),s={};for(o=0;o<r.length;o++)s[r[o]]=o;for(o=0;o<i;o++)if("-"!==(l=t[o])&&l in s&&s[l]>=a){if("1"===l&&1===a)continue;throw new Error(l+" is not a valid digit in base "+e+".")}e=Q(e);var f=[],c="-"===t[0];for(o=c?1:0;o<t.length;o++){var l;if((l=t[o])in s)f.push(Q(s[l]));else{if("<"!==l)throw new Error(l+" is not a valid character");var _=o;do{o++}while(">"!==t[o]&&o<t.length);f.push(Q(t.slice(_+1,o)))}}return $(f,e,c)};function $(t,e,r){var n,o=s[0],i=s[1];for(n=t.length-1;n>=0;n--)o=o.add(t[n].times(i)),i=i.times(e);return r?o.negate():o}function V(t,e){if((e=o(e)).isZero()){if(t.isZero())return{value:[0],isNegative:!1};throw new Error("Cannot convert nonzero numbers to base 0.")}if(e.equals(-1)){if(t.isZero())return{value:[0],isNegative:!1};if(t.isNegative())return{value:[].concat.apply([],Array.apply(null,Array(-t.toJSNumber())).map(Array.prototype.valueOf,[1,0])),isNegative:!1};var r=Array.apply(null,Array(t.toJSNumber()-1)).map(Array.prototype.valueOf,[0,1]);return r.unshift([1]),{value:[].concat.apply([],r),isNegative:!1}}var n=!1;if(t.isNegative()&&e.isPositive()&&(n=!0,t=t.abs()),e.isUnit())return t.isZero()?{value:[0],isNegative:!1}:{value:Array.apply(null,Array(t.toJSNumber())).map(Number.prototype.valueOf,1),isNegative:n};for(var i,u=[],a=t;a.isNegative()||a.compareAbs(e)>=0;){i=a.divmod(e),a=i.quotient;var s=i.remainder;s.isNegative()&&(s=e.minus(s).abs(),a=a.next()),u.push(s.toJSNumber())}return u.push(a.toJSNumber()),{value:u.reverse(),isNegative:n}}function Z(t,e,r){var n=V(t,e);return(n.isNegative?"-":"")+n.value.map((function(t){return function(t,e){return t<(e=e||u).length?e[t]:"<"+t+">"}(t,r)})).join("")}function K(t){if(_(+t)){var e=+t;if(e===m(e))return a?new l(BigInt(e)):new c(e);throw new Error("Invalid integer: "+t)}var n="-"===t[0];n&&(t=t.slice(1));var o=t.split(/e/i);if(o.length>2)throw new Error("Invalid integer: "+o.join("e"));if(2===o.length){var i=o[1];if("+"===i[0]&&(i=i.slice(1)),(i=+i)!==m(i)||!_(i))throw new Error("Invalid integer: "+i+" is not a valid exponent.");var u=o[0],s=u.indexOf(".");if(s>=0&&(i-=u.length-s-1,u=u.slice(0,s)+u.slice(s+1)),i<0)throw new Error("Cannot include negative exponent part for integers");t=u+=new Array(i+1).join("0")}if(!/^([0-9][0-9]*)$/.test(t))throw new Error("Invalid integer: "+t);if(a)return new l(BigInt(n?"-"+t:t));for(var g=[],p=t.length,d=r,y=p-d;p>0;)g.push(+t.slice(y,p)),(y-=d)<0&&(y=0),p-=d;return h(g),new f(g,n)}function Q(t){return"number"==typeof t?function(t){if(a)return new l(BigInt(t));if(_(t)){if(t!==m(t))throw new Error(t+" is not an integer.");return new c(t)}return K(t.toString())}(t):"string"==typeof t?K(t):"bigint"==typeof t?new l(t):t}f.prototype.toArray=function(t){return V(this,t)},c.prototype.toArray=function(t){return V(this,t)},l.prototype.toArray=function(t){return V(this,t)},f.prototype.toString=function(e,r){if(e===t&&(e=10),10!==e)return Z(this,e,r);for(var n,o=this.value,i=o.length,u=String(o[--i]);--i>=0;)n=String(o[i]),u+="0000000".slice(n.length)+n;return(this.sign?"-":"")+u},c.prototype.toString=function(e,r){return e===t&&(e=10),10!=e?Z(this,e,r):String(this.value)},l.prototype.toString=c.prototype.toString,l.prototype.toJSON=f.prototype.toJSON=c.prototype.toJSON=function(){return this.toString()},f.prototype.valueOf=function(){return parseInt(this.toString(),10)},f.prototype.toJSNumber=f.prototype.valueOf,c.prototype.valueOf=function(){return this.value},c.prototype.toJSNumber=c.prototype.valueOf,l.prototype.valueOf=l.prototype.toJSNumber=function(){return parseInt(this.toString(),10)};for(var Y=0;Y<1e3;Y++)s[Y]=Q(Y),Y>0&&(s[-Y]=Q(-Y));return s.one=s[1],s.zero=s[0],s.minusOne=s[-1],s.max=D,s.min=z,s.gcd=G,s.lcm=function(t,e){return t=Q(t).abs(),e=Q(e).abs(),t.divide(G(t,e)).multiply(e)},s.isInstance=function(t){return t instanceof f||t instanceof c||t instanceof l},s.randBetween=function(t,r,n){t=Q(t),r=Q(r);var o=n||Math.random,i=z(t,r),u=D(t,r).subtract(i).add(1);if(u.isSmall)return i.add(Math.floor(o()*u));for(var a=V(u,e).value,f=[],c=!0,l=0;l<a.length;l++){var _=c?a[l]+(l+1<a.length?a[l+1]/e:0):e,g=m(o()*_);f.push(g),g<a[l]&&(c=!1)}return i.add(s.fromArray(f,e,!1))},s.fromArray=function(t,e,r){return $(t.map(Q),Q(e||10),r)},s}();t.hasOwnProperty("exports")&&(t.exports=o),void 0===(n=function(){return o}.call(e,r,e,t))||(t.exports=n)},431:function(t,e,r){var n;!function(o){var i,u=/^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,a=Math.ceil,s=Math.floor,f="[BigNumber Error] ",c=f+"Number primitive has more than 15 significant digits: ",l=1e14,_=14,g=9007199254740991,p=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11,1e12,1e13],h=1e7,d=1e9;function m(t){var e=0|t;return t>0||t===e?e:e-1}function y(t){for(var e,r,n=1,o=t.length,i=t[0]+"";n<o;){for(e=t[n++]+"",r=_-e.length;r--;e="0"+e);i+=e}for(o=i.length;48===i.charCodeAt(--o););return i.slice(0,o+1||1)}function v(t,e){var r,n,o=t.c,i=e.c,u=t.s,a=e.s,s=t.e,f=e.e;if(!u||!a)return null;if(r=o&&!o[0],n=i&&!i[0],r||n)return r?n?0:-a:u;if(u!=a)return u;if(r=u<0,n=s==f,!o||!i)return n?0:!o^r?1:-1;if(!n)return s>f^r?1:-1;for(a=(s=o.length)<(f=i.length)?s:f,u=0;u<a;u++)if(o[u]!=i[u])return o[u]>i[u]^r?1:-1;return s==f?0:s>f^r?1:-1}function b(t,e,r,n){if(t<e||t>r||t!==s(t))throw Error(f+(n||"Argument")+("number"==typeof t?t<e||t>r?" out of range: ":" not an integer: ":" not a primitive number: ")+String(t))}function w(t){var e=t.c.length-1;return m(t.e/_)==e&&t.c[e]%2!=0}function T(t,e){return(t.length>1?t.charAt(0)+"."+t.slice(1):t)+(e<0?"e":"e+")+e}function S(t,e,r){var n,o;if(e<0){for(o=r+".";++e;o+=r);t=o+t}else if(++e>(n=t.length)){for(o=r,e-=n;--e;o+=r);t+=o}else e<n&&(t=t.slice(0,e)+"."+t.slice(e));return t}i=function t(e){var r,n,o,i,x,L,J,E,R,I,A=z.prototype={constructor:z,toString:null,valueOf:null},N=new z(1),O=20,F=4,k=-7,C=21,M=-1e7,P=1e7,U=!1,B=1,W=0,j={prefix:"",groupSize:3,secondaryGroupSize:0,groupSeparator:",",decimalSeparator:".",fractionGroupSize:0,fractionGroupSeparator:" ",suffix:""},q="0123456789abcdefghijklmnopqrstuvwxyz",D=!0;function z(t,e){var r,i,a,f,l,p,h,d,m=this;if(!(m instanceof z))return new z(t,e);if(null==e){if(t&&!0===t._isBigNumber)return m.s=t.s,void(!t.c||t.e>P?m.c=m.e=null:t.e<M?m.c=[m.e=0]:(m.e=t.e,m.c=t.c.slice()));if((p="number"==typeof t)&&0*t==0){if(m.s=1/t<0?(t=-t,-1):1,t===~~t){for(f=0,l=t;l>=10;l/=10,f++);return void(f>P?m.c=m.e=null:(m.e=f,m.c=[t]))}d=String(t)}else{if(!u.test(d=String(t)))return o(m,d,p);m.s=45==d.charCodeAt(0)?(d=d.slice(1),-1):1}(f=d.indexOf("."))>-1&&(d=d.replace(".","")),(l=d.search(/e/i))>0?(f<0&&(f=l),f+=+d.slice(l+1),d=d.substring(0,l)):f<0&&(f=d.length)}else{if(b(e,2,q.length,"Base"),10==e&&D)return V(m=new z(t),O+m.e+1,F);if(d=String(t),p="number"==typeof t){if(0*t!=0)return o(m,d,p,e);if(m.s=1/t<0?(d=d.slice(1),-1):1,z.DEBUG&&d.replace(/^0\.0*|\./,"").length>15)throw Error(c+t)}else m.s=45===d.charCodeAt(0)?(d=d.slice(1),-1):1;for(r=q.slice(0,e),f=l=0,h=d.length;l<h;l++)if(r.indexOf(i=d.charAt(l))<0){if("."==i){if(l>f){f=h;continue}}else if(!a&&(d==d.toUpperCase()&&(d=d.toLowerCase())||d==d.toLowerCase()&&(d=d.toUpperCase()))){a=!0,l=-1,f=0;continue}return o(m,String(t),p,e)}p=!1,(f=(d=n(d,e,10,m.s)).indexOf("."))>-1?d=d.replace(".",""):f=d.length}for(l=0;48===d.charCodeAt(l);l++);for(h=d.length;48===d.charCodeAt(--h););if(d=d.slice(l,++h)){if(h-=l,p&&z.DEBUG&&h>15&&(t>g||t!==s(t)))throw Error(c+m.s*t);if((f=f-l-1)>P)m.c=m.e=null;else if(f<M)m.c=[m.e=0];else{if(m.e=f,m.c=[],l=(f+1)%_,f<0&&(l+=_),l<h){for(l&&m.c.push(+d.slice(0,l)),h-=_;l<h;)m.c.push(+d.slice(l,l+=_));l=_-(d=d.slice(l)).length}else l-=h;for(;l--;d+="0");m.c.push(+d)}}else m.c=[m.e=0]}function G(t,e,r,n){var o,i,u,a,s;if(null==r?r=F:b(r,0,8),!t.c)return t.toString();if(o=t.c[0],u=t.e,null==e)s=y(t.c),s=1==n||2==n&&(u<=k||u>=C)?T(s,u):S(s,u,"0");else if(i=(t=V(new z(t),e,r)).e,a=(s=y(t.c)).length,1==n||2==n&&(e<=i||i<=k)){for(;a<e;s+="0",a++);s=T(s,i)}else if(e-=u,s=S(s,i,"0"),i+1>a){if(--e>0)for(s+=".";e--;s+="0");}else if((e+=i-a)>0)for(i+1==a&&(s+=".");e--;s+="0");return t.s<0&&o?"-"+s:s}function H(t,e){for(var r,n=1,o=new z(t[0]);n<t.length;n++){if(!(r=new z(t[n])).s){o=r;break}e.call(o,r)&&(o=r)}return o}function $(t,e,r){for(var n=1,o=e.length;!e[--o];e.pop());for(o=e[0];o>=10;o/=10,n++);return(r=n+r*_-1)>P?t.c=t.e=null:r<M?t.c=[t.e=0]:(t.e=r,t.c=e),t}function V(t,e,r,n){var o,i,u,f,c,g,h,d=t.c,m=p;if(d){t:{for(o=1,f=d[0];f>=10;f/=10,o++);if((i=e-o)<0)i+=_,u=e,h=(c=d[g=0])/m[o-u-1]%10|0;else if((g=a((i+1)/_))>=d.length){if(!n)break t;for(;d.length<=g;d.push(0));c=h=0,o=1,u=(i%=_)-_+1}else{for(c=f=d[g],o=1;f>=10;f/=10,o++);h=(u=(i%=_)-_+o)<0?0:c/m[o-u-1]%10|0}if(n=n||e<0||null!=d[g+1]||(u<0?c:c%m[o-u-1]),n=r<4?(h||n)&&(0==r||r==(t.s<0?3:2)):h>5||5==h&&(4==r||n||6==r&&(i>0?u>0?c/m[o-u]:0:d[g-1])%10&1||r==(t.s<0?8:7)),e<1||!d[0])return d.length=0,n?(e-=t.e+1,d[0]=m[(_-e%_)%_],t.e=-e||0):d[0]=t.e=0,t;if(0==i?(d.length=g,f=1,g--):(d.length=g+1,f=m[_-i],d[g]=u>0?s(c/m[o-u]%m[u])*f:0),n)for(;;){if(0==g){for(i=1,u=d[0];u>=10;u/=10,i++);for(u=d[0]+=f,f=1;u>=10;u/=10,f++);i!=f&&(t.e++,d[0]==l&&(d[0]=1));break}if(d[g]+=f,d[g]!=l)break;d[g--]=0,f=1}for(i=d.length;0===d[--i];d.pop());}t.e>P?t.c=t.e=null:t.e<M&&(t.c=[t.e=0])}return t}function Z(t){var e,r=t.e;return null===r?t.toString():(e=y(t.c),e=r<=k||r>=C?T(e,r):S(e,r,"0"),t.s<0?"-"+e:e)}return z.clone=t,z.ROUND_UP=0,z.ROUND_DOWN=1,z.ROUND_CEIL=2,z.ROUND_FLOOR=3,z.ROUND_HALF_UP=4,z.ROUND_HALF_DOWN=5,z.ROUND_HALF_EVEN=6,z.ROUND_HALF_CEIL=7,z.ROUND_HALF_FLOOR=8,z.EUCLID=9,z.config=z.set=function(t){var e,r;if(null!=t){if("object"!=typeof t)throw Error(f+"Object expected: "+t);if(t.hasOwnProperty(e="DECIMAL_PLACES")&&(b(r=t[e],0,d,e),O=r),t.hasOwnProperty(e="ROUNDING_MODE")&&(b(r=t[e],0,8,e),F=r),t.hasOwnProperty(e="EXPONENTIAL_AT")&&((r=t[e])&&r.pop?(b(r[0],-d,0,e),b(r[1],0,d,e),k=r[0],C=r[1]):(b(r,-d,d,e),k=-(C=r<0?-r:r))),t.hasOwnProperty(e="RANGE"))if((r=t[e])&&r.pop)b(r[0],-d,-1,e),b(r[1],1,d,e),M=r[0],P=r[1];else{if(b(r,-d,d,e),!r)throw Error(f+e+" cannot be zero: "+r);M=-(P=r<0?-r:r)}if(t.hasOwnProperty(e="CRYPTO")){if((r=t[e])!==!!r)throw Error(f+e+" not true or false: "+r);if(r){if("undefined"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw U=!r,Error(f+"crypto unavailable");U=r}else U=r}if(t.hasOwnProperty(e="MODULO_MODE")&&(b(r=t[e],0,9,e),B=r),t.hasOwnProperty(e="POW_PRECISION")&&(b(r=t[e],0,d,e),W=r),t.hasOwnProperty(e="FORMAT")){if("object"!=typeof(r=t[e]))throw Error(f+e+" not an object: "+r);j=r}if(t.hasOwnProperty(e="ALPHABET")){if("string"!=typeof(r=t[e])||/^.?$|[+\-.\s]|(.).*\1/.test(r))throw Error(f+e+" invalid: "+r);D="0123456789"==r.slice(0,10),q=r}}return{DECIMAL_PLACES:O,ROUNDING_MODE:F,EXPONENTIAL_AT:[k,C],RANGE:[M,P],CRYPTO:U,MODULO_MODE:B,POW_PRECISION:W,FORMAT:j,ALPHABET:q}},z.isBigNumber=function(t){if(!t||!0!==t._isBigNumber)return!1;if(!z.DEBUG)return!0;var e,r,n=t.c,o=t.e,i=t.s;t:if("[object Array]"=={}.toString.call(n)){if((1===i||-1===i)&&o>=-d&&o<=d&&o===s(o)){if(0===n[0]){if(0===o&&1===n.length)return!0;break t}if((e=(o+1)%_)<1&&(e+=_),String(n[0]).length==e){for(e=0;e<n.length;e++)if((r=n[e])<0||r>=l||r!==s(r))break t;if(0!==r)return!0}}}else if(null===n&&null===o&&(null===i||1===i||-1===i))return!0;throw Error(f+"Invalid BigNumber: "+t)},z.maximum=z.max=function(){return H(arguments,A.lt)},z.minimum=z.min=function(){return H(arguments,A.gt)},z.random=(i=9007199254740992,x=Math.random()*i&2097151?function(){return s(Math.random()*i)}:function(){return 8388608*(1073741824*Math.random()|0)+(8388608*Math.random()|0)},function(t){var e,r,n,o,i,u=0,c=[],l=new z(N);if(null==t?t=O:b(t,0,d),o=a(t/_),U)if(crypto.getRandomValues){for(e=crypto.getRandomValues(new Uint32Array(o*=2));u<o;)(i=131072*e[u]+(e[u+1]>>>11))>=9e15?(r=crypto.getRandomValues(new Uint32Array(2)),e[u]=r[0],e[u+1]=r[1]):(c.push(i%1e14),u+=2);u=o/2}else{if(!crypto.randomBytes)throw U=!1,Error(f+"crypto unavailable");for(e=crypto.randomBytes(o*=7);u<o;)(i=281474976710656*(31&e[u])+1099511627776*e[u+1]+4294967296*e[u+2]+16777216*e[u+3]+(e[u+4]<<16)+(e[u+5]<<8)+e[u+6])>=9e15?crypto.randomBytes(7).copy(e,u):(c.push(i%1e14),u+=7);u=o/7}if(!U)for(;u<o;)(i=x())<9e15&&(c[u++]=i%1e14);for(o=c[--u],t%=_,o&&t&&(i=p[_-t],c[u]=s(o/i)*i);0===c[u];c.pop(),u--);if(u<0)c=[n=0];else{for(n=-1;0===c[0];c.splice(0,1),n-=_);for(u=1,i=c[0];i>=10;i/=10,u++);u<_&&(n-=_-u)}return l.e=n,l.c=c,l}),z.sum=function(){for(var t=1,e=arguments,r=new z(e[0]);t<e.length;)r=r.plus(e[t++]);return r},n=function(){var t="0123456789";function e(t,e,r,n){for(var o,i,u=[0],a=0,s=t.length;a<s;){for(i=u.length;i--;u[i]*=e);for(u[0]+=n.indexOf(t.charAt(a++)),o=0;o<u.length;o++)u[o]>r-1&&(null==u[o+1]&&(u[o+1]=0),u[o+1]+=u[o]/r|0,u[o]%=r)}return u.reverse()}return function(n,o,i,u,a){var s,f,c,l,_,g,p,h,d=n.indexOf("."),m=O,v=F;for(d>=0&&(l=W,W=0,n=n.replace(".",""),g=(h=new z(o)).pow(n.length-d),W=l,h.c=e(S(y(g.c),g.e,"0"),10,i,t),h.e=h.c.length),c=l=(p=e(n,o,i,a?(s=q,t):(s=t,q))).length;0==p[--l];p.pop());if(!p[0])return s.charAt(0);if(d<0?--c:(g.c=p,g.e=c,g.s=u,p=(g=r(g,h,m,v,i)).c,_=g.r,c=g.e),d=p[f=c+m+1],l=i/2,_=_||f<0||null!=p[f+1],_=v<4?(null!=d||_)&&(0==v||v==(g.s<0?3:2)):d>l||d==l&&(4==v||_||6==v&&1&p[f-1]||v==(g.s<0?8:7)),f<1||!p[0])n=_?S(s.charAt(1),-m,s.charAt(0)):s.charAt(0);else{if(p.length=f,_)for(--i;++p[--f]>i;)p[f]=0,f||(++c,p=[1].concat(p));for(l=p.length;!p[--l];);for(d=0,n="";d<=l;n+=s.charAt(p[d++]));n=S(n,c,s.charAt(0))}return n}}(),r=function(){function t(t,e,r){var n,o,i,u,a=0,s=t.length,f=e%h,c=e/h|0;for(t=t.slice();s--;)a=((o=f*(i=t[s]%h)+(n=c*i+(u=t[s]/h|0)*f)%h*h+a)/r|0)+(n/h|0)+c*u,t[s]=o%r;return a&&(t=[a].concat(t)),t}function e(t,e,r,n){var o,i;if(r!=n)i=r>n?1:-1;else for(o=i=0;o<r;o++)if(t[o]!=e[o]){i=t[o]>e[o]?1:-1;break}return i}function r(t,e,r,n){for(var o=0;r--;)t[r]-=o,o=t[r]<e[r]?1:0,t[r]=o*n+t[r]-e[r];for(;!t[0]&&t.length>1;t.splice(0,1));}return function(n,o,i,u,a){var f,c,g,p,h,d,y,v,b,w,T,S,x,L,J,E,R,I=n.s==o.s?1:-1,A=n.c,N=o.c;if(!(A&&A[0]&&N&&N[0]))return new z(n.s&&o.s&&(A?!N||A[0]!=N[0]:N)?A&&0==A[0]||!N?0*I:I/0:NaN);for(b=(v=new z(I)).c=[],I=i+(c=n.e-o.e)+1,a||(a=l,c=m(n.e/_)-m(o.e/_),I=I/_|0),g=0;N[g]==(A[g]||0);g++);if(N[g]>(A[g]||0)&&c--,I<0)b.push(1),p=!0;else{for(L=A.length,E=N.length,g=0,I+=2,(h=s(a/(N[0]+1)))>1&&(N=t(N,h,a),A=t(A,h,a),E=N.length,L=A.length),x=E,T=(w=A.slice(0,E)).length;T<E;w[T++]=0);R=N.slice(),R=[0].concat(R),J=N[0],N[1]>=a/2&&J++;do{if(h=0,(f=e(N,w,E,T))<0){if(S=w[0],E!=T&&(S=S*a+(w[1]||0)),(h=s(S/J))>1)for(h>=a&&(h=a-1),y=(d=t(N,h,a)).length,T=w.length;1==e(d,w,y,T);)h--,r(d,E<y?R:N,y,a),y=d.length,f=1;else 0==h&&(f=h=1),y=(d=N.slice()).length;if(y<T&&(d=[0].concat(d)),r(w,d,T,a),T=w.length,-1==f)for(;e(N,w,E,T)<1;)h++,r(w,E<T?R:N,T,a),T=w.length}else 0===f&&(h++,w=[0]);b[g++]=h,w[0]?w[T++]=A[x]||0:(w=[A[x]],T=1)}while((x++<L||null!=w[0])&&I--);p=null!=w[0],b[0]||b.splice(0,1)}if(a==l){for(g=1,I=b[0];I>=10;I/=10,g++);V(v,i+(v.e=g+c*_-1)+1,u,p)}else v.e=c,v.r=+p;return v}}(),L=/^(-?)0([xbo])(?=\w[\w.]*$)/i,J=/^([^.]+)\.$/,E=/^\.([^.]+)$/,R=/^-?(Infinity|NaN)$/,I=/^\s*\+(?=[\w.])|^\s+|\s+$/g,o=function(t,e,r,n){var o,i=r?e:e.replace(I,"");if(R.test(i))t.s=isNaN(i)?null:i<0?-1:1;else{if(!r&&(i=i.replace(L,(function(t,e,r){return o="x"==(r=r.toLowerCase())?16:"b"==r?2:8,n&&n!=o?t:e})),n&&(o=n,i=i.replace(J,"$1").replace(E,"0.$1")),e!=i))return new z(i,o);if(z.DEBUG)throw Error(f+"Not a"+(n?" base "+n:"")+" number: "+e);t.s=null}t.c=t.e=null},A.absoluteValue=A.abs=function(){var t=new z(this);return t.s<0&&(t.s=1),t},A.comparedTo=function(t,e){return v(this,new z(t,e))},A.decimalPlaces=A.dp=function(t,e){var r,n,o,i=this;if(null!=t)return b(t,0,d),null==e?e=F:b(e,0,8),V(new z(i),t+i.e+1,e);if(!(r=i.c))return null;if(n=((o=r.length-1)-m(this.e/_))*_,o=r[o])for(;o%10==0;o/=10,n--);return n<0&&(n=0),n},A.dividedBy=A.div=function(t,e){return r(this,new z(t,e),O,F)},A.dividedToIntegerBy=A.idiv=function(t,e){return r(this,new z(t,e),0,1)},A.exponentiatedBy=A.pow=function(t,e){var r,n,o,i,u,c,l,g,p=this;if((t=new z(t)).c&&!t.isInteger())throw Error(f+"Exponent not an integer: "+Z(t));if(null!=e&&(e=new z(e)),u=t.e>14,!p.c||!p.c[0]||1==p.c[0]&&!p.e&&1==p.c.length||!t.c||!t.c[0])return g=new z(Math.pow(+Z(p),u?t.s*(2-w(t)):+Z(t))),e?g.mod(e):g;if(c=t.s<0,e){if(e.c?!e.c[0]:!e.s)return new z(NaN);(n=!c&&p.isInteger()&&e.isInteger())&&(p=p.mod(e))}else{if(t.e>9&&(p.e>0||p.e<-1||(0==p.e?p.c[0]>1||u&&p.c[1]>=24e7:p.c[0]<8e13||u&&p.c[0]<=9999975e7)))return i=p.s<0&&w(t)?-0:0,p.e>-1&&(i=1/i),new z(c?1/i:i);W&&(i=a(W/_+2))}for(u?(r=new z(.5),c&&(t.s=1),l=w(t)):l=(o=Math.abs(+Z(t)))%2,g=new z(N);;){if(l){if(!(g=g.times(p)).c)break;i?g.c.length>i&&(g.c.length=i):n&&(g=g.mod(e))}if(o){if(0===(o=s(o/2)))break;l=o%2}else if(V(t=t.times(r),t.e+1,1),t.e>14)l=w(t);else{if(0==(o=+Z(t)))break;l=o%2}p=p.times(p),i?p.c&&p.c.length>i&&(p.c.length=i):n&&(p=p.mod(e))}return n?g:(c&&(g=N.div(g)),e?g.mod(e):i?V(g,W,F,void 0):g)},A.integerValue=function(t){var e=new z(this);return null==t?t=F:b(t,0,8),V(e,e.e+1,t)},A.isEqualTo=A.eq=function(t,e){return 0===v(this,new z(t,e))},A.isFinite=function(){return!!this.c},A.isGreaterThan=A.gt=function(t,e){return v(this,new z(t,e))>0},A.isGreaterThanOrEqualTo=A.gte=function(t,e){return 1===(e=v(this,new z(t,e)))||0===e},A.isInteger=function(){return!!this.c&&m(this.e/_)>this.c.length-2},A.isLessThan=A.lt=function(t,e){return v(this,new z(t,e))<0},A.isLessThanOrEqualTo=A.lte=function(t,e){return-1===(e=v(this,new z(t,e)))||0===e},A.isNaN=function(){return!this.s},A.isNegative=function(){return this.s<0},A.isPositive=function(){return this.s>0},A.isZero=function(){return!!this.c&&0==this.c[0]},A.minus=function(t,e){var r,n,o,i,u=this,a=u.s;if(e=(t=new z(t,e)).s,!a||!e)return new z(NaN);if(a!=e)return t.s=-e,u.plus(t);var s=u.e/_,f=t.e/_,c=u.c,g=t.c;if(!s||!f){if(!c||!g)return c?(t.s=-e,t):new z(g?u:NaN);if(!c[0]||!g[0])return g[0]?(t.s=-e,t):new z(c[0]?u:3==F?-0:0)}if(s=m(s),f=m(f),c=c.slice(),a=s-f){for((i=a<0)?(a=-a,o=c):(f=s,o=g),o.reverse(),e=a;e--;o.push(0));o.reverse()}else for(n=(i=(a=c.length)<(e=g.length))?a:e,a=e=0;e<n;e++)if(c[e]!=g[e]){i=c[e]<g[e];break}if(i&&(o=c,c=g,g=o,t.s=-t.s),(e=(n=g.length)-(r=c.length))>0)for(;e--;c[r++]=0);for(e=l-1;n>a;){if(c[--n]<g[n]){for(r=n;r&&!c[--r];c[r]=e);--c[r],c[n]+=l}c[n]-=g[n]}for(;0==c[0];c.splice(0,1),--f);return c[0]?$(t,c,f):(t.s=3==F?-1:1,t.c=[t.e=0],t)},A.modulo=A.mod=function(t,e){var n,o,i=this;return t=new z(t,e),!i.c||!t.s||t.c&&!t.c[0]?new z(NaN):!t.c||i.c&&!i.c[0]?new z(i):(9==B?(o=t.s,t.s=1,n=r(i,t,0,3),t.s=o,n.s*=o):n=r(i,t,0,B),(t=i.minus(n.times(t))).c[0]||1!=B||(t.s=i.s),t)},A.multipliedBy=A.times=function(t,e){var r,n,o,i,u,a,s,f,c,g,p,d,y,v,b,w=this,T=w.c,S=(t=new z(t,e)).c;if(!(T&&S&&T[0]&&S[0]))return!w.s||!t.s||T&&!T[0]&&!S||S&&!S[0]&&!T?t.c=t.e=t.s=null:(t.s*=w.s,T&&S?(t.c=[0],t.e=0):t.c=t.e=null),t;for(n=m(w.e/_)+m(t.e/_),t.s*=w.s,(s=T.length)<(g=S.length)&&(y=T,T=S,S=y,o=s,s=g,g=o),o=s+g,y=[];o--;y.push(0));for(v=l,b=h,o=g;--o>=0;){for(r=0,p=S[o]%b,d=S[o]/b|0,i=o+(u=s);i>o;)r=((f=p*(f=T[--u]%b)+(a=d*f+(c=T[u]/b|0)*p)%b*b+y[i]+r)/v|0)+(a/b|0)+d*c,y[i--]=f%v;y[i]=r}return r?++n:y.splice(0,1),$(t,y,n)},A.negated=function(){var t=new z(this);return t.s=-t.s||null,t},A.plus=function(t,e){var r,n=this,o=n.s;if(e=(t=new z(t,e)).s,!o||!e)return new z(NaN);if(o!=e)return t.s=-e,n.minus(t);var i=n.e/_,u=t.e/_,a=n.c,s=t.c;if(!i||!u){if(!a||!s)return new z(o/0);if(!a[0]||!s[0])return s[0]?t:new z(a[0]?n:0*o)}if(i=m(i),u=m(u),a=a.slice(),o=i-u){for(o>0?(u=i,r=s):(o=-o,r=a),r.reverse();o--;r.push(0));r.reverse()}for((o=a.length)-(e=s.length)<0&&(r=s,s=a,a=r,e=o),o=0;e;)o=(a[--e]=a[e]+s[e]+o)/l|0,a[e]=l===a[e]?0:a[e]%l;return o&&(a=[o].concat(a),++u),$(t,a,u)},A.precision=A.sd=function(t,e){var r,n,o,i=this;if(null!=t&&t!==!!t)return b(t,1,d),null==e?e=F:b(e,0,8),V(new z(i),t,e);if(!(r=i.c))return null;if(n=(o=r.length-1)*_+1,o=r[o]){for(;o%10==0;o/=10,n--);for(o=r[0];o>=10;o/=10,n++);}return t&&i.e+1>n&&(n=i.e+1),n},A.shiftedBy=function(t){return b(t,-9007199254740991,g),this.times("1e"+t)},A.squareRoot=A.sqrt=function(){var t,e,n,o,i,u=this,a=u.c,s=u.s,f=u.e,c=O+4,l=new z("0.5");if(1!==s||!a||!a[0])return new z(!s||s<0&&(!a||a[0])?NaN:a?u:1/0);if(0==(s=Math.sqrt(+Z(u)))||s==1/0?(((e=y(a)).length+f)%2==0&&(e+="0"),s=Math.sqrt(+e),f=m((f+1)/2)-(f<0||f%2),n=new z(e=s==1/0?"5e"+f:(e=s.toExponential()).slice(0,e.indexOf("e")+1)+f)):n=new z(s+""),n.c[0])for((s=(f=n.e)+c)<3&&(s=0);;)if(i=n,n=l.times(i.plus(r(u,i,c,1))),y(i.c).slice(0,s)===(e=y(n.c)).slice(0,s)){if(n.e<f&&--s,"9999"!=(e=e.slice(s-3,s+1))&&(o||"4999"!=e)){+e&&(+e.slice(1)||"5"!=e.charAt(0))||(V(n,n.e+O+2,1),t=!n.times(n).eq(u));break}if(!o&&(V(i,i.e+O+2,0),i.times(i).eq(u))){n=i;break}c+=4,s+=4,o=1}return V(n,n.e+O+1,F,t)},A.toExponential=function(t,e){return null!=t&&(b(t,0,d),t++),G(this,t,e,1)},A.toFixed=function(t,e){return null!=t&&(b(t,0,d),t=t+this.e+1),G(this,t,e)},A.toFormat=function(t,e,r){var n,o=this;if(null==r)null!=t&&e&&"object"==typeof e?(r=e,e=null):t&&"object"==typeof t?(r=t,t=e=null):r=j;else if("object"!=typeof r)throw Error(f+"Argument not an object: "+r);if(n=o.toFixed(t,e),o.c){var i,u=n.split("."),a=+r.groupSize,s=+r.secondaryGroupSize,c=r.groupSeparator||"",l=u[0],_=u[1],g=o.s<0,p=g?l.slice(1):l,h=p.length;if(s&&(i=a,a=s,s=i,h-=i),a>0&&h>0){for(i=h%a||a,l=p.substr(0,i);i<h;i+=a)l+=c+p.substr(i,a);s>0&&(l+=c+p.slice(i)),g&&(l="-"+l)}n=_?l+(r.decimalSeparator||"")+((s=+r.fractionGroupSize)?_.replace(new RegExp("\\d{"+s+"}\\B","g"),"$&"+(r.fractionGroupSeparator||"")):_):l}return(r.prefix||"")+n+(r.suffix||"")},A.toFraction=function(t){var e,n,o,i,u,a,s,c,l,g,h,d,m=this,v=m.c;if(null!=t&&(!(s=new z(t)).isInteger()&&(s.c||1!==s.s)||s.lt(N)))throw Error(f+"Argument "+(s.isInteger()?"out of range: ":"not an integer: ")+Z(s));if(!v)return new z(m);for(e=new z(N),l=n=new z(N),o=c=new z(N),d=y(v),u=e.e=d.length-m.e-1,e.c[0]=p[(a=u%_)<0?_+a:a],t=!t||s.comparedTo(e)>0?u>0?e:l:s,a=P,P=1/0,s=new z(d),c.c[0]=0;g=r(s,e,0,1),1!=(i=n.plus(g.times(o))).comparedTo(t);)n=o,o=i,l=c.plus(g.times(i=l)),c=i,e=s.minus(g.times(i=e)),s=i;return i=r(t.minus(n),o,0,1),c=c.plus(i.times(l)),n=n.plus(i.times(o)),c.s=l.s=m.s,h=r(l,o,u*=2,F).minus(m).abs().comparedTo(r(c,n,u,F).minus(m).abs())<1?[l,o]:[c,n],P=a,h},A.toNumber=function(){return+Z(this)},A.toPrecision=function(t,e){return null!=t&&b(t,1,d),G(this,t,e,2)},A.toString=function(t){var e,r=this,o=r.s,i=r.e;return null===i?o?(e="Infinity",o<0&&(e="-"+e)):e="NaN":(null==t?e=i<=k||i>=C?T(y(r.c),i):S(y(r.c),i,"0"):10===t&&D?e=S(y((r=V(new z(r),O+i+1,F)).c),r.e,"0"):(b(t,2,q.length,"Base"),e=n(S(y(r.c),i,"0"),10,t,o,!0)),o<0&&r.c[0]&&(e="-"+e)),e},A.valueOf=A.toJSON=function(){return Z(this)},A._isBigNumber=!0,null!=e&&z.set(e),z}(),i.default=i.BigNumber=i,void 0===(n=function(){return i}.call(e,r,e,t))||(t.exports=n)}()},818:(t,e)=>{var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};"undefined"!=typeof window&&window.document,"undefined"!=typeof process&&null!=process.versions&&process.versions.node;"object"===("undefined"==typeof self?"undefined":r(self))&&self.constructor&&self.constructor.name,"undefined"!=typeof window&&"nodejs"===window.name||"undefined"!=typeof navigator&&(navigator.userAgent.includes("Node.js")||navigator.userAgent.includes("jsdom")),"undefined"!=typeof Deno&&void 0!==Deno.version&&Deno.version.deno},257:(t,e)=>{for(var r="0123456789abcdef".split(""),n=[],o=[],i=0;i<256;i++)n[i]=r[i>>4&15]+r[15&i],i<16&&(i<10?o[48+i]=i:o[87+i]=i);e.c=function(t){for(var e=t.length,r="",o=0;o<e;)r+=n[t[o++]];return r},e.J=function(t){for(var e=t.length>>1,r=e<<1,n=new Uint8Array(e),i=0,u=0;u<r;)n[i++]=o[t.charCodeAt(u++)]<<4|o[t.charCodeAt(u++)];return n}},400:(t,e,r)=>{var n=r(123).stringify,o=r(813);t.exports=function(t){return{parse:o(t),stringify:n}},t.exports.parse=o(),t.exports.stringify=n},813:(t,e,r)=>{var n=null;const o=/(?:_|\\u005[Ff])(?:_|\\u005[Ff])(?:p|\\u0070)(?:r|\\u0072)(?:o|\\u006[Ff])(?:t|\\u0074)(?:o|\\u006[Ff])(?:_|\\u005[Ff])(?:_|\\u005[Ff])/,i=/(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)/;t.exports=function(t){var e={strict:!1,storeAsString:!1,alwaysParseAsBig:!1,useNativeBigInt:!1,protoAction:"error",constructorAction:"error"};if(null!=t){if(!0===t.strict&&(e.strict=!0),!0===t.storeAsString&&(e.storeAsString=!0),e.alwaysParseAsBig=!0===t.alwaysParseAsBig&&t.alwaysParseAsBig,e.useNativeBigInt=!0===t.useNativeBigInt&&t.useNativeBigInt,void 0!==t.constructorAction){if("error"!==t.constructorAction&&"ignore"!==t.constructorAction&&"preserve"!==t.constructorAction)throw new Error(`Incorrect value for constructorAction option, must be "error", "ignore" or undefined but passed ${t.constructorAction}`);e.constructorAction=t.constructorAction}if(void 0!==t.protoAction){if("error"!==t.protoAction&&"ignore"!==t.protoAction&&"preserve"!==t.protoAction)throw new Error(`Incorrect value for protoAction option, must be "error", "ignore" or undefined but passed ${t.protoAction}`);e.protoAction=t.protoAction}}var u,a,s,f,c={'"':'"',"\\":"\\","/":"/",b:"\b",f:"\f",n:"\n",r:"\r",t:"\t"},l=function(t){throw{name:"SyntaxError",message:t,at:u,text:s}},_=function(t){return t&&t!==a&&l("Expected '"+t+"' instead of '"+a+"'"),a=s.charAt(u),u+=1,a},g=function(){var t,o="";for("-"===a&&(o="-",_("-"));a>="0"&&a<="9";)o+=a,_();if("."===a)for(o+=".";_()&&a>="0"&&a<="9";)o+=a;if("e"===a||"E"===a)for(o+=a,_(),"-"!==a&&"+"!==a||(o+=a,_());a>="0"&&a<="9";)o+=a,_();if(t=+o,isFinite(t))return null==n&&(n=r(431)),o.length>15?e.storeAsString?o:e.useNativeBigInt?BigInt(o):new n(o):e.alwaysParseAsBig?e.useNativeBigInt?BigInt(t):new n(t):t;l("Bad number")},p=function(){var t,e,r,n="";if('"'===a)for(var o=u;_();){if('"'===a)return u-1>o&&(n+=s.substring(o,u-1)),_(),n;if("\\"===a){if(u-1>o&&(n+=s.substring(o,u-1)),_(),"u"===a){for(r=0,e=0;e<4&&(t=parseInt(_(),16),isFinite(t));e+=1)r=16*r+t;n+=String.fromCharCode(r)}else{if("string"!=typeof c[a])break;n+=c[a]}o=u}}l("Bad string")},h=function(){for(;a&&a<=" ";)_()};return f=function(){switch(h(),a){case"{":return function(){var t,r=Object.create(null);if("{"===a){if(_("{"),h(),"}"===a)return _("}"),r;for(;a;){if(t=p(),h(),_(":"),!0===e.strict&&Object.hasOwnProperty.call(r,t)&&l('Duplicate key "'+t+'"'),!0===o.test(t)?"error"===e.protoAction?l("Object contains forbidden prototype property"):"ignore"===e.protoAction?f():r[t]=f():!0===i.test(t)?"error"===e.constructorAction?l("Object contains forbidden constructor property"):"ignore"===e.constructorAction?f():r[t]=f():r[t]=f(),h(),"}"===a)return _("}"),r;_(","),h()}}l("Bad object")}();case"[":return function(){var t=[];if("["===a){if(_("["),h(),"]"===a)return _("]"),t;for(;a;){if(t.push(f()),h(),"]"===a)return _("]"),t;_(","),h()}}l("Bad array")}();case'"':return p();case"-":return g();default:return a>="0"&&a<="9"?g():function(){switch(a){case"t":return _("t"),_("r"),_("u"),_("e"),!0;case"f":return _("f"),_("a"),_("l"),_("s"),_("e"),!1;case"n":return _("n"),_("u"),_("l"),_("l"),null}l("Unexpected '"+a+"'")}()}},function(t,e){var r;return s=t+"",u=0,a=" ",r=f(),h(),a&&l("Syntax error"),"function"==typeof e?function t(r,n){var o,i=r[n];return i&&"object"==typeof i&&Object.keys(i).forEach((function(e){void 0!==(o=t(i,e))?i[e]=o:delete i[e]})),e.call(r,n,i)}({"":r},""):r}}},123:(t,e,r)=>{var n=r(431),o=t.exports;!function(){var t,e,r,i=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,u={"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"};function a(t){return i.lastIndex=0,i.test(t)?'"'+t.replace(i,(function(t){var e=u[t];return"string"==typeof e?e:"\\u"+("0000"+t.charCodeAt(0).toString(16)).slice(-4)}))+'"':'"'+t+'"'}function s(o,i){var u,f,c,l,_,g=t,p=i[o],h=null!=p&&(p instanceof n||n.isBigNumber(p));switch(p&&"object"==typeof p&&"function"==typeof p.toJSON&&(p=p.toJSON(o)),"function"==typeof r&&(p=r.call(i,o,p)),typeof p){case"string":return h?p:a(p);case"number":return isFinite(p)?String(p):"null";case"boolean":case"null":case"bigint":return String(p);case"object":if(!p)return"null";if(t+=e,_=[],"[object Array]"===Object.prototype.toString.apply(p)){for(l=p.length,u=0;u<l;u+=1)_[u]=s(u,p)||"null";return c=0===_.length?"[]":t?"[\n"+t+_.join(",\n"+t)+"\n"+g+"]":"["+_.join(",")+"]",t=g,c}if(r&&"object"==typeof r)for(l=r.length,u=0;u<l;u+=1)"string"==typeof r[u]&&(c=s(f=r[u],p))&&_.push(a(f)+(t?": ":":")+c);else Object.keys(p).forEach((function(e){var r=s(e,p);r&&_.push(a(e)+(t?": ":":")+r)}));return c=0===_.length?"{}":t?"{\n"+t+_.join(",\n"+t)+"\n"+g+"}":"{"+_.join(",")+"}",t=g,c}}"function"!=typeof o.stringify&&(o.stringify=function(n,o,i){var u;if(t="",e="","number"==typeof i)for(u=0;u<i;u+=1)e+=" ";else"string"==typeof i&&(e=i);if(r=o,o&&"function"!=typeof o&&("object"!=typeof o||"number"!=typeof o.length))throw new Error("JSON.stringify");return s("",{"":n})})}()}},n={};function o(t){var e=n[t];if(void 0!==e)return e.exports;var i=n[t]={id:t,loaded:!1,exports:{}};return r[t].call(i.exports,i,i.exports,o),i.loaded=!0,i.exports}o.d=(t,e)=>{for(var r in e)o.o(e,r)&&!o.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},o.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),o.nmd=t=>(t.paths=[],t.children||(t.children=[]),t);var i={};(()=>{function r(){throw new Error("Failed pattern match")}o.d(i,{J:()=>ec});const n=function(t){return function(e){return function(){return t(e)}}},u=function(t){return function(e){return function(r){return function(){return t(e,r)}}}},a=function(t){return function(e){return function(r){return function(n){return function(){return t(e,r,n)}}}}},s=function(t){return function(e){return function(r){return function(n){return function(o){return function(){return t(e,r,n,o)}}}}}},f=function(t){return function(e){return function(r){return function(n){return function(o){return function(i){return function(){return t(e,r,n,o,i)}}}}}}},c=function(t){return t.toString()},l=function(t){var e=t.length;return'"'+t.replace(/[\0-\x1F\x7F"\\]/g,(function(r,n){switch(r){case'"':case"\\":return"\\"+r;case"":return"\\a";case"\b":return"\\b";case"\f":return"\\f";case"\n":return"\\n";case"\r":return"\\r";case"\t":return"\\t";case"\v":return"\\v"}var o=n+1,i=o<e&&t[o]>="0"&&t[o]<="9"?"\\&":"";return"\\"+r.charCodeAt(0).toString(10)+i}))+'"'},_=t=>t,g=_("LT"),p=_("GT"),h=_("EQ"),d=(t,e)=>({tag:t,_1:e}),m=d("Nothing"),y=t=>d("Just",t),v=t=>"Nothing"===t.tag||"Just"!==t.tag&&void r(),b={map:t=>e=>"Just"===e.tag?d("Just",t(e._1)):m},w={apply:t=>e=>"Just"===t.tag?"Just"===e.tag?d("Just",t._1(e._1)):m:"Nothing"===t.tag?m:void r(),Functor0:()=>b},T={bind:t=>e=>"Just"===t.tag?e(t._1):"Nothing"===t.tag?m:void r(),Apply0:()=>w},S={pure:y,Apply0:()=>w},x={Applicative0:()=>S,Bind1:()=>T},L=(t,e)=>({tag:"NonEmpty",_1:t,_2:e}),J=(t,e)=>({tag:"Tuple",_1:t,_2:e}),E=t=>e=>J(t,e),R=t=>t._2,I=t=>t._1,A=(t,e,r)=>({tag:t,_1:e,_2:r}),N=A("Nil"),O=t=>e=>A("Cons",t,e),F={foldr:t=>e=>{const n=F.foldl((e=>r=>t(r)(e)))(e),o=(i=N,t=>{let e,n=i,o=t,u=!0;for(;u;){const t=n,i=o;"Nil"!==i.tag?"Cons"!==i.tag?r():(n=A("Cons",i._1,t),o=i._2):(u=!1,e=t)}return e});var i;return t=>n(o(t))},foldl:t=>e=>n=>{let o,i=e,u=n,a=!0;for(;a;){const e=i,n=u;"Nil"!==n.tag?"Cons"!==n.tag?r():(i=t(e)(n._1),u=n._2):(a=!1,o=e)}return o},foldMap:t=>{const e=t.mempty;return r=>F.foldl((e=>{const n=t.Semigroup0().append(e);return t=>n(r(t))}))(e)}},k={append:t=>e=>L(t._1,F.foldr(O)(A("Cons",e._1,e._2))(t._2))},C=(t,e)=>({tag:t,_1:e}),M=t=>C("Left",t),P=t=>C("Right",t),U={map:t=>e=>"Left"===e.tag?C("Left",e._1):"Right"===e.tag?C("Right",t(e._1)):void r()},B=t=>"Left"===t.tag?m:"Right"===t.tag?d("Just",t._1):void r(),W={apply:t=>e=>{if("Left"===t.tag)return C("Left",t._1);if("Right"===t.tag){if("Left"===e.tag)return C("Left",e._1);if("Right"===e.tag)return C("Right",t._1(e._1))}r()},Functor0:()=>U},j={pure:P,Apply0:()=>W},q=(()=>({tag:"Proxy"}))(),D=function(t){return function(e){for(var r=e.length,n=new Array(r),o=0;o<r;o++)n[o]=t(e[o]);return n}},z={map:D},G=t=>t,H=function(t){return function(e){return function(r){for(var n=e,o=r.length-1;o>=0;o--)n=t(r[o])(n);return n}}},$=function(t){return function(e){return function(r){for(var n=e,o=r.length,i=0;i<o;i++)n=t(n)(r[i]);return n}}},V=t=>t,Z=t=>{const e=t.Apply0();return r=>n=>r.foldr((t=>{const r=n(t);return t=>e.apply(e.Functor0().map((t=>G))(r))(t)}))(t.pure())},K={foldr:H,foldl:$,foldMap:t=>{const e=t.mempty;return r=>K.foldr((e=>n=>t.Semigroup0().append(r(e))(n)))(e)}},Q=function(t){return t},Y={map:t=>e=>t(e)},X={apply:t=>e=>t(e),Functor0:()=>Y},tt={bind:t=>e=>e(t),Apply0:()=>X},et={pure:t=>t,Apply0:()=>X},rt={Applicative0:()=>et,Bind1:()=>tt},nt=function(){function t(t){return[t]}function e(t){return function(e){return[t,e]}}function r(t){return function(e){return function(r){return[t,e,r]}}}function n(t){return function(e){return t.concat(e)}}return function(o){return function(i){return function(u){return function(a){return function(s){return function f(c,l){switch(l-c){case 0:return u([]);case 1:return i(t)(a(s[c]));case 2:return o(i(e)(a(s[c])))(a(s[c+1]));case 3:return o(o(i(r)(a(s[c])))(a(s[c+1])))(a(s[c+2]));default:var _=c+2*Math.floor((l-c)/4);return o(i(n)(f(c,_)))(f(_,l))}}(0,s.length)}}}}}}(),ot=t=>t,it=t=>e=>n=>"Nothing"===n.tag?t.pure(m):"Just"===n.tag?t.Apply0().Functor0().map(y)(e(n._1)):void r(),ut=t=>e=>n=>"Left"===n.tag?t.pure(C("Left",n._1)):"Right"===n.tag?t.Apply0().Functor0().map(P)(e(n._1)):void r(),at={traverse:t=>{const e=t.Apply0();return nt(e.apply)(e.Functor0().map)(t.pure)},sequence:t=>at.traverse(t)(ot),Functor0:()=>z,Foldable1:()=>K};var st=function(t){return function(e){return t===e}};const ft=function(t){return function(e){return function(r){if(e.length!==r.length)return!1;for(var n=0;n<e.length;n++)if(!t(e[n])(r[n]))return!1;return!0}}},ct={eq:st},lt={eq:st};var _t=function(t){return function(e){return function(r){return function(n){return function(o){return n<o?t:n===o?e:r}}}}};const gt=_t,pt={compare:_t(g)(h)(p),Eq0:()=>ct},ht={compare:gt(g)(h)(p),Eq0:()=>lt},dt=function(t){throw new Error(t)},mt={hfoldlWithIndex:t=>t=>e=>t},yt=t=>e=>({hfoldlWithIndex:r=>n=>o=>e.hfoldlWithIndex(r)(t.foldingWithIndex(r)(q)(n)(q))(q)});function vt(t,e){return e[t]()}function bt(t,e,r){return e[t](r)}function wt(t,e,r,n){return e[t](r,n)}function Tt(t,e,r,n,o){return e[t](r,n,o)}const St=function(t){return function(e){return e[t]}},xt=function(t){return function(e){return function(r){var n={};for(var o in r)({}).hasOwnProperty.call(r,o)&&(n[o]=r[o]);return n[t]=e,n}}},Lt=function(t){return function(e){var r={};for(var n in e)n!==t&&{}.hasOwnProperty.call(e,n)&&(r[n]=e[n]);return r}},Jt=(()=>({tag:"MkFFIStep"}))(),Et=t=>()=>e=>()=>()=>({foldingWithIndex:r=>r=>n=>o=>xt(t.reflectSymbol(r))(e.mthFn(r)(q))(n)}),Rt=t=>()=>()=>e=>()=>()=>({foldingWithIndex:r=>r=>n=>o=>xt(t.reflectSymbol(r))(e.mthFn(r)(q))(n)}),It=()=>()=>t=>e=>t.hfoldlWithIndex(Jt)({})(q),At=yt(Rt({reflectSymbol:()=>"free"})()()({mthFn:t=>t=>u(vt)("free")})()()),Nt={reflectSymbol:()=>"kind"},Ot=yt(Rt({reflectSymbol:()=>"to_bytes"})()()({mthFn:t=>t=>u(vt)("to_bytes")})()()),Ft=yt(Rt({reflectSymbol:()=>"to_js_value"})()()({mthFn:t=>t=>u(vt)("to_js_value")})()()),kt=yt(Rt({reflectSymbol:()=>"to_json"})()()({mthFn:t=>t=>u(vt)("to_json")})()()),Ct={reflectSymbol:()=>"to_keyhash"},Mt={reflectSymbol:()=>"to_scripthash"},Pt=yt(Rt({reflectSymbol:()=>"from_bytes"})()()({mthFn:t=>t=>a(bt)("from_bytes")})()()),Ut=yt(Rt({reflectSymbol:()=>"from_json"})()()({mthFn:t=>t=>a(bt)("from_json")})()()),Bt={reflectSymbol:()=>"header"},Wt={reflectSymbol:()=>"network_id"},jt={reflectSymbol:()=>"payment_cred"},qt={reflectSymbol:()=>"to_bech32"},Dt={reflectSymbol:()=>"from_bech32"},zt={reflectSymbol:()=>"header_matches_kind"},Gt={reflectSymbol:()=>"is_valid"},Ht={reflectSymbol:()=>"is_valid_bech32"},$t={reflectSymbol:()=>"is_valid_byron"},Vt=(()=>At(yt(Rt(Nt)()()({mthFn:t=>t=>u(vt)("kind")})()())(Ot(Ft(kt(yt(Rt(Ct)()()({mthFn:t=>t=>u(vt)("to_keyhash")})()())(yt(Rt(Mt)()()({mthFn:t=>t=>u(vt)("to_scripthash")})()())(mt))))))).hfoldlWithIndex(Jt)({})(q))(),Zt=(()=>At(yt(Rt(Bt)()()({mthFn:t=>t=>u(vt)("header")})()())(yt(Rt(Wt)()()({mthFn:t=>t=>u(vt)("network_id")})()())(yt(Rt(jt)()()({mthFn:t=>t=>u(vt)("payment_cred")})()())(yt(Rt(qt)()()({mthFn:t=>t=>a(bt)("to_bech32")})()())(Ot(Ft(kt(mt)))))))).hfoldlWithIndex(Jt)({})(q))(),Kt=(()=>yt(Rt(Dt)()()({mthFn:t=>t=>a(bt)("from_bech32")})()())(Pt(Ut(yt(Rt(zt)()()({mthFn:t=>t=>s(wt)("header_matches_kind")})()())(yt(Rt(Gt)()()({mthFn:t=>t=>a(bt)("is_valid")})()())(yt(Rt(Ht)()()({mthFn:t=>t=>a(bt)("is_valid_bech32")})()())(yt(Rt($t)()()({mthFn:t=>t=>a(bt)("is_valid_byron")})()())(mt))))))).hfoldlWithIndex(Jt)({})(q))(),Qt=yt(Rt({reflectSymbol:()=>"from_json"})()()({mthFn:t=>t=>a(bt)("from_json")})()()),Yt={reflectSymbol:()=>"new"},Xt=(()=>Qt(yt(Rt(Yt)()()({mthFn:t=>t=>u(vt)("new")})()())(mt)).hfoldlWithIndex(Jt)({})(q))(),te={reflectSymbol:()=>"free"},ee={reflectSymbol:()=>"to_bech32"},re={reflectSymbol:()=>"to_bytes"},ne={reflectSymbol:()=>"to_hex"},oe=(()=>yt(Rt(te)()()({mthFn:t=>t=>u(vt)("free")})()())(yt(Rt(ee)()()({mthFn:t=>t=>a(bt)("to_bech32")})()())(yt(Rt(re)()()({mthFn:t=>t=>u(vt)("to_bytes")})()())(yt(Rt(ne)()()({mthFn:t=>t=>u(vt)("to_hex")})()())(mt)))).hfoldlWithIndex(Jt)({})(q))(),ie=yt(Rt({reflectSymbol:()=>"checked_add"})()()({mthFn:t=>t=>a(bt)("checked_add")})()()),ue=yt(Rt({reflectSymbol:()=>"checked_sub"})()()({mthFn:t=>t=>a(bt)("checked_sub")})()()),ae=yt(Rt({reflectSymbol:()=>"clamped_sub"})()()({mthFn:t=>t=>a(bt)("clamped_sub")})()()),se={reflectSymbol:()=>"coin"},fe=yt(Rt({reflectSymbol:()=>"compare"})()()({mthFn:t=>t=>a(bt)("compare")})()()),ce=yt(Rt({reflectSymbol:()=>"free"})()()({mthFn:t=>t=>u(vt)("free")})()()),le=yt(Rt({reflectSymbol:()=>"is_zero"})()()({mthFn:t=>t=>u(vt)("is_zero")})()()),_e={reflectSymbol:()=>"multiasset"},ge={reflectSymbol:()=>"set_coin"},pe={reflectSymbol:()=>"set_multiasset"},he=yt(Rt({reflectSymbol:()=>"to_bytes"})()()({mthFn:t=>t=>u(vt)("to_bytes")})()()),de=yt(Rt({reflectSymbol:()=>"to_js_value"})()()({mthFn:t=>t=>u(vt)("to_js_value")})()()),me=yt(Rt({reflectSymbol:()=>"to_json"})()()({mthFn:t=>t=>u(vt)("to_json")})()())(mt),ye=he(de(me)),ve=yt(Rt({reflectSymbol:()=>"from_bytes"})()()({mthFn:t=>t=>a(bt)("from_bytes")})()()),be=yt(Rt({reflectSymbol:()=>"from_json"})()()({mthFn:t=>t=>a(bt)("from_json")})()()),we={reflectSymbol:()=>"new_from_assets"},Te={reflectSymbol:()=>"plutus_data"},Se={reflectSymbol:()=>"redeemers"},xe={reflectSymbol:()=>"input"},Le={reflectSymbol:()=>"output"},Je={reflectSymbol:()=>"new"},Ee=yt(Rt(Je)()()({mthFn:t=>t=>s(wt)("new")})()())(mt),Re={reflectSymbol:()=>"address"},Ie={reflectSymbol:()=>"amount"},Ae={reflectSymbol:()=>"datum"},Ne={reflectSymbol:()=>"auxiliary_data"},Oe={reflectSymbol:()=>"body"},Fe={reflectSymbol:()=>"index"},ke={reflectSymbol:()=>"transaction_id"},Ce={reflectSymbol:()=>"to_bech32"},Me={reflectSymbol:()=>"to_hex"},Pe=It()()(ce(yt(Rt(Ce)()()({mthFn:t=>t=>a(bt)("to_bech32")})()())(he(yt(Rt(Me)()()({mthFn:t=>t=>u(vt)("to_hex")})()())(mt))))),Ue=yt(Rt({reflectSymbol:()=>"get"})()()({mthFn:t=>t=>a(bt)("get")})()()),Be={reflectSymbol:()=>"get_asset"},We=yt(Rt({reflectSymbol:()=>"insert"})()()({mthFn:t=>t=>s(wt)("insert")})()()),je=yt(Rt({reflectSymbol:()=>"keys"})()()({mthFn:t=>t=>u(vt)("keys")})()()),qe=yt(Rt({reflectSymbol:()=>"len"})()()({mthFn:t=>t=>u(vt)("len")})()()),De={reflectSymbol:()=>"set_asset"},ze={reflectSymbol:()=>"sub"},Ge={reflectSymbol:()=>"as_data_hash"},He={reflectSymbol:()=>"as_inline_data"},$e={reflectSymbol:()=>"kind"},Ve={reflectSymbol:()=>"checked_div"},Ze={reflectSymbol:()=>"checked_div_ceil"},Ke={reflectSymbol:()=>"checked_mul"},Qe=he(yt(Rt({reflectSymbol:()=>"to_str"})()()({mthFn:t=>t=>u(vt)("to_str")})()())(mt)),Ye={reflectSymbol:()=>"from_str"},Xe=It()()(ve(yt(Rt(Ye)()()({mthFn:t=>t=>a(bt)("from_str")})()())(mt))),tr=qe(ye),er={reflectSymbol:()=>"add"},rr={reflectSymbol:()=>"name"},nr=(()=>ie(ue(ae(yt(Rt(se)()()({mthFn:t=>t=>u(vt)("coin")})()())(fe(ce(le(yt(Rt(_e)()()({mthFn:t=>t=>u(vt)("multiasset")})()())(yt(Rt(ge)()()({mthFn:t=>t=>a(bt)("set_coin")})()())(yt(Rt(pe)()()({mthFn:t=>t=>a(bt)("set_multiasset")})()())(ye)))))))))).hfoldlWithIndex(Jt)({})(q))(),or=(()=>ve(be(yt(Rt(we)()()({mthFn:t=>t=>a(bt)("new_from_assets")})()())(mt))).hfoldlWithIndex(Jt)({})(q))(),ir=(()=>ce(yt(Rt(Te)()()({mthFn:t=>t=>u(vt)("plutus_data")})()())(yt(Rt(Se)()()({mthFn:t=>t=>u(vt)("redeemers")})()())(ye))).hfoldlWithIndex(Jt)({})(q))(),ur=(()=>ve(be(mt)).hfoldlWithIndex(Jt)({})(q))(),ar=(()=>ce(yt(Rt(xe)()()({mthFn:t=>t=>u(vt)("input")})()())(yt(Rt(Le)()()({mthFn:t=>t=>u(vt)("output")})()())(mt))).hfoldlWithIndex(Jt)({})(q))(),sr=(()=>ve(Ee).hfoldlWithIndex(Jt)({})(q))(),fr=(()=>yt(Rt(Re)()()({mthFn:t=>t=>u(vt)("address")})()())(yt(Rt(Ie)()()({mthFn:t=>t=>u(vt)("amount")})()())(yt(Rt(Ae)()()({mthFn:t=>t=>u(vt)("datum")})()())(ce(mt)))).hfoldlWithIndex(Jt)({})(q))(),cr=(()=>yt(Rt(Ne)()()({mthFn:t=>t=>u(vt)("auxiliary_data")})()())(yt(Rt(Oe)()()({mthFn:t=>t=>u(vt)("body")})()())(ce(he(me)))).hfoldlWithIndex(Jt)({})(q))(),lr=(()=>ce(yt(Rt(Fe)()()({mthFn:t=>t=>u(vt)("index")})()())(yt(Rt(ke)()()({mthFn:t=>t=>u(vt)("transaction_id")})()())(mt))).hfoldlWithIndex(Jt)({})(q))(),_r=Pe(q),gr=(()=>ve(be(yt(Rt(Je)()()({mthFn:t=>t=>f(Tt)("new")})()())(mt))).hfoldlWithIndex(Jt)({})(q))(),pr=Pe(q),hr=(()=>ce(Ue(yt(Rt(Be)()()({mthFn:t=>t=>s(wt)("get_asset")})()())(We(je(qe(yt(Rt(De)()()({mthFn:t=>t=>f(Tt)("set_asset")})()())(yt(Rt(ze)()()({mthFn:t=>t=>a(bt)("sub")})()())(ye)))))))).hfoldlWithIndex(Jt)({})(q))(),dr=(()=>yt(Rt(Ge)()()({mthFn:t=>t=>u(vt)("as_data_hash")})()())(yt(Rt(He)()()({mthFn:t=>t=>u(vt)("as_inline_data")})()())(ce(yt(Rt($e)()()({mthFn:t=>t=>u(vt)("kind")})()())(mt)))).hfoldlWithIndex(Jt)({})(q))(),mr=Pe(q),yr=(()=>ie(yt(Rt(Ve)()()({mthFn:t=>t=>a(bt)("checked_div")})()())(yt(Rt(Ze)()()({mthFn:t=>t=>a(bt)("checked_div_ceil")})()())(yt(Rt(Ke)()()({mthFn:t=>t=>a(bt)("checked_mul")})()())(ue(ae(fe(ce(le(Qe))))))))).hfoldlWithIndex(Jt)({})(q))(),vr=Xe(q),br=(()=>ce(Ue(We(je(tr)))).hfoldlWithIndex(Jt)({})(q))(),wr=(()=>yt(Rt(er)()()({mthFn:t=>t=>a(bt)("add")})()())(ce(Ue(tr))).hfoldlWithIndex(Jt)({})(q))(),Tr=(()=>ce(yt(Rt(rr)()()({mthFn:t=>t=>u(vt)("name")})()())(ye)).hfoldlWithIndex(Jt)({})(q))(),Sr={reflectSymbol:()=>"add"},xr=yt(Rt({reflectSymbol:()=>"free"})()()({mthFn:t=>t=>u(vt)("free")})()()),Lr={reflectSymbol:()=>"get"},Jr={reflectSymbol:()=>"len"},Er=yt(Rt({reflectSymbol:()=>"to_bytes"})()()({mthFn:t=>t=>u(vt)("to_bytes")})()()),Rr={reflectSymbol:()=>"to_js_value"},Ir={reflectSymbol:()=>"to_json"},Ar={reflectSymbol:()=>"to_bech32"},Nr={reflectSymbol:()=>"to_hex"},Or=(()=>yt(Rt(Sr)()()({mthFn:t=>t=>a(bt)("add")})()())(xr(yt(Rt(Lr)()()({mthFn:t=>t=>a(bt)("get")})()())(yt(Rt(Jr)()()({mthFn:t=>t=>u(vt)("len")})()())(Er(yt(Rt(Rr)()()({mthFn:t=>t=>u(vt)("to_js_value")})()())(yt(Rt(Ir)()()({mthFn:t=>t=>u(vt)("to_json")})()())(mt))))))).hfoldlWithIndex(Jt)({})(q))(),Fr=(()=>xr(yt(Rt(Ar)()()({mthFn:t=>t=>a(bt)("to_bech32")})()())(Er(yt(Rt(Nr)()()({mthFn:t=>t=>u(vt)("to_hex")})()())(mt)))).hfoldlWithIndex(Jt)({})(q))(),kr=t=>{const e=t.Apply0(),r=e.Functor0(),n=(()=>{const t={map:t=>{const e=r.map(t);return t=>r=>e(t(r))}};return{apply:t=>r=>n=>e.apply(t(n))(r(n)),Functor0:()=>t}})();return{bind:e=>r=>n=>t.bind(e(n))((t=>r(t)(n))),Apply0:()=>n}},Cr=t=>{const e=t.Applicative0(),r=e.Apply0(),n=(()=>{const t=r.Functor0(),n={map:e=>{const r=t.map(e);return t=>e=>r(t(e))}},o={apply:t=>e=>n=>r.apply(t(n))(e(n)),Functor0:()=>n};return{pure:t=>{const r=e.pure(t);return t=>r},Apply0:()=>o}})(),o=kr(t.Bind1());return{Applicative0:()=>n,Bind1:()=>o}},Mr=t=>{const e=Cr(t.Monad0());return{liftEffect:e=>{const r=t.liftEffect(e);return t=>r},Monad0:()=>e}},Pr=function(t){return function(){return t}},Ur={Applicative0:()=>jr,Bind1:()=>Br},Br={bind:function(t){return function(e){return function(){return e(t())()}}},Apply0:()=>Wr},Wr={apply:t=>e=>()=>{const r=t(),n=e();return jr.pure(r(n))()},Functor0:()=>qr},jr={pure:Pr,Apply0:()=>Wr},qr={map:t=>e=>()=>{const r=e();return t(r)}},Dr="function"==typeof Array.prototype.fill?function(t){return function(e){return t<1?[]:new Array(t).fill(e)}}:function(t){return function(e){for(var r=[],n=0,o=0;o<t;o++)r[n++]=e;return r}},zr=function(){function t(t,e){this.head=t,this.tail=e}var e={};function r(e){return function(r){return new t(e,r)}}return function(t){return function(n){return function(t){for(var r=[],n=0,o=t;o!==e;)r[n++]=o.head,o=o.tail;return r}(t(r)(e)(n))}}}(),Gr=function(t){return function(e){return function(r){return function(n){return n<0||n>=r.length?e:t(r[n])}}}},Hr=function(t){return function(e){return function(r){return function(n){for(var o=0,i=n.length;o<i;o++)if(r(n[o]))return t(o);return e}}}},$r=function(t){return function(e){return e.filter(t)}},Vr=function(){function t(e,r,n,o,i,u){var a,s,f,c,l,_;for((a=i+(u-i>>1))-i>1&&t(e,r,o,n,i,a),u-a>1&&t(e,r,o,n,a,u),s=i,f=a,c=i;s<a&&f<u;)l=o[s],_=o[f],r(e(l)(_))>0?(n[c++]=_,++f):(n[c++]=l,++s);for(;s<a;)n[c++]=o[s++];for(;f<u;)n[c++]=o[f++]}return function(e){return function(r){return function(n){var o;return n.length<2?n:(o=n.slice(0),t(e,r,o,n.slice(0),0,n.length),o)}}}}(),Zr=t=>Vr(t)((t=>"GT"===t?1:"EQ"===t?0:"LT"===t?-1:void r())),Kr=Gr(y)(m),Qr=t=>e=>{const n=Zr((e=>r=>t(e._2)(r._2)))((o=E,function(t){return function(e){for(var r=t.length<e.length?t.length:e.length,n=new Array(r),i=0;i<r;i++)n[i]=o(t[i])(e[i]);return n}})((0,function(t){for(var e=0>t?-1:1,r=new Array(e*(t-0)+1),n=0,o=0;n!==t;)r[o++]=n,n+=e;return r[o]=n,r})(e.length-1|0))(e));var o;const i=Kr(n)(0);return"Nothing"===i.tag?[]:"Just"===i.tag?D(R)((u=ht,t=>Zr((e=>r=>u.compare(t(e))(t(r)))))(I)((()=>{const e=function(t){return function(){return t}}([i._1]);return()=>{const o=e();for(const e of n){const n=t((()=>{const t=Kr(o)(o.length-1|0);if("Just"===t.tag)return t._1._2;r()})())(e._2);"LT"!==n&&"GT"!==n&&"EQ"===n||o.push(e)}return o}})()())):void r();var u},Yr=Hr(y)(m),Xr=t=>e=>n=>{const o=Yr((r=>t.eq(r)(e)))(n);return"Nothing"!==o.tag&&("Just"===o.tag||void r())},tn=t=>{return e=e=>{const n=t(e);return"Nothing"===n.tag?[]:"Just"===n.tag?[n._1]:void r()},t=>{return(r=t,function(t){for(var e=[],n=0,o=r.length;n<o;n++)Array.prototype.push.apply(e,t(r[n]));return e})(e);var r};var e},en=function(t){return function(e){for(var r=e.length,n=Array(r),o=0;o<r;o++)n[o]=t(o)(e[o]);return n}},rn={mapWithIndex:en,Functor0:()=>z},nn={foldrWithIndex:t=>e=>{const r=H((e=>{const r=e._1,n=e._2;return e=>t(r)(n)(e)}))(e),n=en(E);return t=>r(n(t))},foldlWithIndex:t=>e=>{const r=$((e=>r=>t(r._1)(e)(r._2)))(e),n=en(E);return t=>r(n(t))},foldMapWithIndex:t=>{const e=t.mempty;return r=>nn.foldrWithIndex((e=>n=>o=>t.Semigroup0().append(r(e)(n))(o)))(e)},Foldable0:()=>K},on=t=>e=>e(t),un=function(t){return function(e){return function(r){return function(n){return function(o){return function(i){for(var u=[],a=i;;){var s=o(a);u.push(r(s));var f=n(s);if(t(f))return u;a=e(f)}}}}}}},an=t=>{if("Just"===t.tag)return t._1;r()},sn={unfoldr1:un(v)(an)(I)(R)},fn=function(t){return function(e){return function(r){return function(n){return function(o){return function(i){for(var u=[],a=i;;){var s=o(a);if(t(s))return u;var f=e(s);u.push(r(f)),a=n(f)}}}}}}},cn=t=>{if("Just"===t.tag)return t._1;r()},ln={unfoldr:fn(v)(cn)(I)(R),Unfoldable10:()=>sn},_n={};function gn(t,e){var r={};for(var n in t)hasOwnProperty.call(t,n)&&(r[n]=e(t[n]));return r}function pn(t){return function(e){return function(r){return function(n){var o=r;function i(t){return function(r){return e(r)(t)(n[t])}}for(var u in n)hasOwnProperty.call(n,u)&&(o=t(o)(i(u)));return o}}}}function hn(t,e,r,n){return r in n?e(n[r]):t}function dn(t){return function(e){var r=[];for(var n in e)hasOwnProperty.call(e,n)&&r.push(t(n)(e[n]));return r}}Object.keys||dn((function(t){return function(){return t}}));const mn=t=>e=>{const r={...e};return t(r)(),r},yn=t=>{const e=zr(t.foldr);return t=>{const r={};for(const n of e(t))r[n._1]=n._2;return r}},vn=pn(on);function bn(t){return t}const wn=null;function Tn(t){return JSON.stringify(t)}function Sn(t,e,r,n,o,i,u){return null==u?t():"boolean"==typeof u?e(u):"number"==typeof u?r(u):"string"==typeof u?n(u):"[object Array]"===Object.prototype.toString.call(u)?o(u):i(u)}const xn=t=>e=>r=>Sn((e=>t),(e=>t),(e=>t),e,(e=>t),(e=>t),r);isFinite,Math.abs,Math.acos,Math.asin,Math.atan,Math.ceil,Math.cos,Math.exp,Math.floor,Math.log,Math.round,Math.sign&&Math.sign,Math.sin,Math.sqrt,Math.tan,Math.trunc&&Math.trunc;const Ln=function(t){return function(e){return function(r){return(0|r)===r?t(r):e}}},Jn=function(t){return function(e){return function(r){var n;n=r<11?"[0-"+(r-1).toString()+"]":11===r?"[0-9a]":"[0-9a-"+String.fromCharCode(86+r)+"]";var o=new RegExp("^[\\+\\-]?"+n+"+$","i");return function(n){if(o.test(n)){var i=parseInt(n,r);return(0|i)===i?t(i):e}return e}}}}(y)(m)(10),En=Ln(y)(m),Rn=function(t){var e=null;return function(){return void 0===t||(e=t(),t=void 0),e}},In=function(t){return t()},An=(t,e,r)=>({tag:t,_1:e,_2:r}),Nn=An("Nil"),On=Rn((t=>Nn)),Fn={foldr:t=>e=>r=>Fn.foldl((e=>r=>t(r)(e)))(e)(Fn.foldl((t=>e=>Rn((r=>An("Cons",e,t)))))(On)(r)),foldl:t=>e=>n=>{let o,i=e,u=n,a=!0;for(;a;){const e=i,n=In(u);"Nil"!==n.tag?"Cons"!==n.tag?r():(i=t(e)(n._1),u=n._2):(a=!1,o=e)}return o},foldMap:t=>{const e=t.mempty;return r=>Fn.foldl((e=>n=>t.Semigroup0().append(e)(r(n))))(e)}},kn={unfoldr1:(()=>{const t=e=>n=>Rn((o=>In((()=>{const o=e(n);if("Just"===o._2.tag){const r=o._1,n=t(e)(o._2._1);return Rn((t=>An("Cons",r,n)))}if("Nothing"===o._2.tag){const t=o._1;return Rn((e=>An("Cons",t,On)))}r()})())));return t})()},Cn={unfoldr:(()=>{const t=e=>n=>Rn((o=>In((()=>{const o=e(n);if("Nothing"===o.tag)return On;if("Just"===o.tag){const r=o._1._1,n=t(e)(o._1._2);return Rn((t=>An("Cons",r,n)))}r()})())));return t})(),Unfoldable10:()=>kn},Mn=t=>e=>Rn((n=>(e=>{let n,o=e,i=!0;for(;i;){const e=o;if("Nil"!==e.tag)if("Cons"!==e.tag)r();else{if(t(e._1)){i=!1,n=An("Cons",e._1,Mn(t)(e._2));continue}o=In(e._2)}else i=!1,n=Nn}return n})(In(e)))),Pn=(t,e,r,n)=>({tag:"KickUp",_1:t,_2:e,_3:r,_4:n}),Un=(t,e,r,n,o,i,u,a)=>({tag:t,_1:e,_2:r,_3:n,_4:o,_5:i,_6:u,_7:a}),Bn=(t,e,r,n,o,i,u)=>({tag:t,_1:e,_2:r,_3:n,_4:o,_5:i,_6:u}),Wn=Un("Leaf"),jn=t=>"Leaf"===t.tag?0:"Two"===t.tag?(1+jn(t._1)|0)+jn(t._4)|0:"Three"===t.tag?((2+jn(t._1)|0)+jn(t._4)|0)+jn(t._7)|0:void r(),qn=t=>e=>t.unfoldr((t=>{let e,n=t,o=!0;for(;o;){const t=n;if("Nil"!==t.tag){if("Cons"===t.tag){if("Leaf"===t._1.tag){n=t._2;continue}if("Two"===t._1.tag){if("Leaf"===t._1._1.tag){if("Leaf"===t._1._4.tag){o=!1,e=d("Just",J(J(t._1._2,t._1._3),t._2));continue}o=!1,e=d("Just",J(J(t._1._2,t._1._3),A("Cons",t._1._4,t._2)));continue}n=A("Cons",t._1._1,A("Cons",Un("Two",Wn,t._1._2,t._1._3,Wn),A("Cons",t._1._4,t._2)));continue}if("Three"===t._1.tag){n=A("Cons",t._1._1,A("Cons",Un("Two",Wn,t._1._2,t._1._3,Wn),A("Cons",t._1._4,A("Cons",Un("Two",Wn,t._1._5,t._1._6,Wn),A("Cons",t._1._7,t._2)))));continue}}r()}else o=!1,e=m}return e}))(A("Cons",e,N)),Dn=t=>e=>n=>{let o,i=n,u=!0;for(;u;){const n=i;if("Leaf"!==n.tag)if("Two"!==n.tag)if("Three"!==n.tag)r();else{const r=t.compare(e)(n._2);if("EQ"===r){u=!1,o=d("Just",n._3);continue}const a=t.compare(e)(n._5);if("EQ"===a){u=!1,o=d("Just",n._6);continue}if("LT"===r){i=n._1;continue}if("GT"===a){i=n._7;continue}i=n._4}else{const r=t.compare(e)(n._2);if("EQ"===r){u=!1,o=d("Just",n._3);continue}if("LT"===r){i=n._1;continue}i=n._4}else u=!1,o=m}return o},zn={map:t=>e=>"Leaf"===e.tag?Wn:"Two"===e.tag?Un("Two",zn.map(t)(e._1),e._2,t(e._3),zn.map(t)(e._4)):"Three"===e.tag?Un("Three",zn.map(t)(e._1),e._2,t(e._3),zn.map(t)(e._4),e._5,t(e._6),zn.map(t)(e._7)):void r()},Gn=t=>e=>n=>{let o,i=t,u=e,a=n,s=!0;for(;s;){const t=i,e=u,n=a;if("Nil"!==e.tag){if("Cons"===e.tag){if("TwoLeft"===e._1.tag){i=t,u=e._2,a=Un("Two",n,e._1._1,e._1._2,e._1._3);continue}if("TwoRight"===e._1.tag){i=t,u=e._2,a=Un("Two",e._1._1,e._1._2,e._1._3,n);continue}if("ThreeLeft"===e._1.tag){i=t,u=e._2,a=Un("Three",n,e._1._1,e._1._2,e._1._3,e._1._4,e._1._5,e._1._6);continue}if("ThreeMiddle"===e._1.tag){i=t,u=e._2,a=Un("Three",e._1._1,e._1._2,e._1._3,n,e._1._4,e._1._5,e._1._6);continue}if("ThreeRight"===e._1.tag){i=t,u=e._2,a=Un("Three",e._1._1,e._1._2,e._1._3,e._1._4,e._1._5,e._1._6,n);continue}}r()}else s=!1,o=n}return o},Hn=t=>e=>n=>{const o=e=>n=>{let o,i=e,u=n,a=!0;for(;a;){const e=i,n=u;if("Nil"!==e.tag){if("Cons"===e.tag){if("TwoLeft"===e._1.tag){a=!1,o=Gn(t)(e._2)(Un("Three",n._1,n._2,n._3,n._4,e._1._1,e._1._2,e._1._3));continue}if("TwoRight"===e._1.tag){a=!1,o=Gn(t)(e._2)(Un("Three",e._1._1,e._1._2,e._1._3,n._1,n._2,n._3,n._4));continue}if("ThreeLeft"===e._1.tag){i=e._2,u=Pn(Un("Two",n._1,n._2,n._3,n._4),e._1._1,e._1._2,Un("Two",e._1._3,e._1._4,e._1._5,e._1._6));continue}if("ThreeMiddle"===e._1.tag){i=e._2,u=Pn(Un("Two",e._1._1,e._1._2,e._1._3,n._1),n._2,n._3,Un("Two",n._4,e._1._4,e._1._5,e._1._6));continue}if("ThreeRight"===e._1.tag){i=e._2,u=Pn(Un("Two",e._1._1,e._1._2,e._1._3,e._1._4),e._1._5,e._1._6,Un("Two",n._1,n._2,n._3,n._4));continue}}r()}else a=!1,o=Un("Two",n._1,n._2,n._3,n._4)}return o};return i=N,u=>{let a,s=i,f=u,c=!0;for(;c;){const i=s,u=f;if("Leaf"!==u.tag)if("Two"!==u.tag)if("Three"!==u.tag)r();else{const r=t.compare(e)(u._2);if("EQ"===r){c=!1,a=Gn(t)(i)(Un("Three",u._1,e,n,u._4,u._5,u._6,u._7));continue}const o=t.compare(e)(u._5);if("EQ"===o){c=!1,a=Gn(t)(i)(Un("Three",u._1,u._2,u._3,u._4,e,n,u._7));continue}if("LT"===r){s=A("Cons",Bn("ThreeLeft",u._2,u._3,u._4,u._5,u._6,u._7),i),f=u._1;continue}if("GT"===r&&"LT"===o){s=A("Cons",Bn("ThreeMiddle",u._1,u._2,u._3,u._5,u._6,u._7),i),f=u._4;continue}s=A("Cons",Bn("ThreeRight",u._1,u._2,u._3,u._4,u._5,u._6),i),f=u._7}else{const r=t.compare(e)(u._2);if("EQ"===r){c=!1,a=Gn(t)(i)(Un("Two",u._1,e,n,u._4));continue}if("LT"===r){s=A("Cons",Bn("TwoLeft",u._2,u._3,u._4),i),f=u._1;continue}s=A("Cons",Bn("TwoRight",u._1,u._2,u._3),i),f=u._4}else c=!1,a=o(i)(Pn(Wn,e,n,Wn))}return a};var i},$n={foldr:t=>e=>n=>"Leaf"===n.tag?e:"Two"===n.tag?$n.foldr(t)(t(n._3)($n.foldr(t)(e)(n._4)))(n._1):"Three"===n.tag?$n.foldr(t)(t(n._3)($n.foldr(t)(t(n._6)($n.foldr(t)(e)(n._7)))(n._4)))(n._1):void r(),foldl:t=>e=>n=>"Leaf"===n.tag?e:"Two"===n.tag?$n.foldl(t)(t($n.foldl(t)(e)(n._1))(n._3))(n._4):"Three"===n.tag?$n.foldl(t)(t($n.foldl(t)(t($n.foldl(t)(e)(n._1))(n._3))(n._4))(n._6))(n._7):void r(),foldMap:t=>{const e=t.mempty,n=t.Semigroup0();return o=>i=>"Leaf"===i.tag?e:"Two"===i.tag?n.append($n.foldMap(t)(o)(i._1))(n.append(o(i._3))($n.foldMap(t)(o)(i._4))):"Three"===i.tag?n.append($n.foldMap(t)(o)(i._1))(n.append(o(i._3))(n.append($n.foldMap(t)(o)(i._4))(n.append(o(i._6))($n.foldMap(t)(o)(i._7))))):void r()}},Vn={foldrWithIndex:t=>e=>n=>"Leaf"===n.tag?e:"Two"===n.tag?Vn.foldrWithIndex(t)(t(n._2)(n._3)(Vn.foldrWithIndex(t)(e)(n._4)))(n._1):"Three"===n.tag?Vn.foldrWithIndex(t)(t(n._2)(n._3)(Vn.foldrWithIndex(t)(t(n._5)(n._6)(Vn.foldrWithIndex(t)(e)(n._7)))(n._4)))(n._1):void r(),foldlWithIndex:t=>e=>n=>"Leaf"===n.tag?e:"Two"===n.tag?Vn.foldlWithIndex(t)(t(n._2)(Vn.foldlWithIndex(t)(e)(n._1))(n._3))(n._4):"Three"===n.tag?Vn.foldlWithIndex(t)(t(n._5)(Vn.foldlWithIndex(t)(t(n._2)(Vn.foldlWithIndex(t)(e)(n._1))(n._3))(n._4))(n._6))(n._7):void r(),foldMapWithIndex:t=>{const e=t.mempty,n=t.Semigroup0();return o=>i=>"Leaf"===i.tag?e:"Two"===i.tag?n.append(Vn.foldMapWithIndex(t)(o)(i._1))(n.append(o(i._2)(i._3))(Vn.foldMapWithIndex(t)(o)(i._4))):"Three"===i.tag?n.append(Vn.foldMapWithIndex(t)(o)(i._1))(n.append(o(i._2)(i._3))(n.append(Vn.foldMapWithIndex(t)(o)(i._4))(n.append(o(i._5)(i._6))(Vn.foldMapWithIndex(t)(o)(i._7))))):void r()},Foldable0:()=>$n},Zn=t=>e=>{const r=ft((r=>n=>t.eq(r._1)(n._1)&&e.eq(r._2)(n._2)));return{eq:t=>e=>r(qn(ln)(t))(qn(ln)(e))}},Kn=t=>e=>e.foldl((e=>r=>Hn(t)(r._1)(r._2)(e)))(Wn),Qn=t=>e=>n=>{const o=(t=>e=>{const n=e=>n=>{let o,i=e,u=n,a=!0;for(;a;){const e=i,n=u;if("Nil"!==e.tag)if("Cons"!==e.tag)r();else{const r=e._2,s=(e,n,o,i,u,a,s,f,c,l)=>Gn(t)(r)(Un("Two",Un("Two",e,u,f,n),a,c,Un("Two",o,s,l,i))),f=(e,n,o,i,u,a,s,f,c,l)=>Gn(t)(r)(Un("Two",Un("Two",e,u,f,n),a,c,Un("Two",o,s,l,i))),c=(e,n,o,i,u,a,s,f,c,l)=>Gn(t)(r)(Un("Two",Un("Three",e,u,f,n,a,c,o),s,l,i)),l=(e,n,o,i,u,a,s,f,c,l)=>Gn(t)(r)(Un("Two",Un("Three",e,u,f,n,a,c,o),s,l,i)),_=(e,n,o,i,u,a,s,f,c,l)=>Gn(t)(r)(Un("Two",e,u,f,Un("Three",n,a,c,o,s,l,i))),g=(e,n,o,i,u,a,s,f,c,l)=>Gn(t)(r)(Un("Two",e,u,f,Un("Three",n,a,c,o,s,l,i))),p=(e,n,o,i,u,a,s,f,c,l,_,g,p)=>Gn(t)(r)(Un("Three",Un("Two",e,a,l,n),s,_,Un("Two",o,f,g,i),c,p,u)),h=(e,n,o,i,u,a,s,f,c,l,_,g,p)=>Gn(t)(r)(Un("Three",Un("Two",e,a,l,n),s,_,Un("Two",o,f,g,i),c,p,u)),d=(e,n,o,i,u,a,s,f,c,l,_,g,p)=>Gn(t)(r)(Un("Three",e,a,l,Un("Two",n,s,_,o),f,g,Un("Two",i,c,p,u))),m=(e,n,o,i,u,a,s,f,c,l,_,g,p)=>Gn(t)(r)(Un("Three",e,a,l,Un("Two",n,s,_,o),f,g,Un("Two",i,c,p,u)));if("Leaf"===n.tag){if("TwoLeft"===e._1.tag){if("Leaf"===e._1._3.tag){a=!1,o=Gn(t)(r)(Un("Two",Wn,e._1._1,e._1._2,Wn));continue}if("Two"===e._1._3.tag){i=r,u=Un("Three",n,e._1._1,e._1._2,e._1._3._1,e._1._3._2,e._1._3._3,e._1._3._4);continue}if("Three"===e._1._3.tag){a=!1,o=s(n,e._1._3._1,e._1._3._4,e._1._3._7,e._1._1,e._1._3._2,e._1._3._5,e._1._2,e._1._3._3,e._1._3._6);continue}a=!1,o=dt("The impossible happened in partial function `up`.");continue}if("TwoRight"===e._1.tag){if("Leaf"===e._1._1.tag){a=!1,o=Gn(t)(r)(Un("Two",Wn,e._1._2,e._1._3,Wn));continue}if("Two"===e._1._1.tag){i=r,u=Un("Three",e._1._1._1,e._1._1._2,e._1._1._3,e._1._1._4,e._1._2,e._1._3,n);continue}if("Three"===e._1._1.tag){a=!1,o=f(e._1._1._1,e._1._1._4,e._1._1._7,n,e._1._1._2,e._1._1._5,e._1._2,e._1._1._3,e._1._1._6,e._1._3);continue}a=!1,o=dt("The impossible happened in partial function `up`.");continue}if("ThreeLeft"===e._1.tag){if("Leaf"===e._1._6.tag&&"Leaf"===e._1._3.tag){a=!1,o=Gn(t)(r)(Un("Three",Wn,e._1._1,e._1._2,Wn,e._1._4,e._1._5,Wn));continue}if("Two"===e._1._3.tag){a=!1,o=c(n,e._1._3._1,e._1._3._4,e._1._6,e._1._1,e._1._3._2,e._1._4,e._1._2,e._1._3._3,e._1._5);continue}if("Three"===e._1._3.tag){a=!1,o=p(n,e._1._3._1,e._1._3._4,e._1._3._7,e._1._6,e._1._1,e._1._3._2,e._1._3._5,e._1._4,e._1._2,e._1._3._3,e._1._3._6,e._1._5);continue}a=!1,o=dt("The impossible happened in partial function `up`.");continue}if("ThreeMiddle"===e._1.tag){if("Leaf"===e._1._1.tag){if("Leaf"===e._1._6.tag){a=!1,o=Gn(t)(r)(Un("Three",Wn,e._1._2,e._1._3,Wn,e._1._4,e._1._5,Wn));continue}if("Two"===e._1._6.tag){a=!1,o=_(e._1._1,n,e._1._6._1,e._1._6._4,e._1._2,e._1._4,e._1._6._2,e._1._3,e._1._5,e._1._6._3);continue}if("Three"===e._1._6.tag){a=!1,o=d(e._1._1,n,e._1._6._1,e._1._6._4,e._1._6._7,e._1._2,e._1._4,e._1._6._2,e._1._6._5,e._1._3,e._1._5,e._1._6._3,e._1._6._6);continue}a=!1,o=dt("The impossible happened in partial function `up`.");continue}if("Two"===e._1._1.tag){a=!1,o=l(e._1._1._1,e._1._1._4,n,e._1._6,e._1._1._2,e._1._2,e._1._4,e._1._1._3,e._1._3,e._1._5);continue}if("Two"===e._1._6.tag){a=!1,o=_(e._1._1,n,e._1._6._1,e._1._6._4,e._1._2,e._1._4,e._1._6._2,e._1._3,e._1._5,e._1._6._3);continue}if("Three"===e._1._1.tag){a=!1,o=h(e._1._1._1,e._1._1._4,e._1._1._7,n,e._1._6,e._1._1._2,e._1._1._5,e._1._2,e._1._4,e._1._1._3,e._1._1._6,e._1._3,e._1._5);continue}if("Three"===e._1._6.tag){a=!1,o=d(e._1._1,n,e._1._6._1,e._1._6._4,e._1._6._7,e._1._2,e._1._4,e._1._6._2,e._1._6._5,e._1._3,e._1._5,e._1._6._3,e._1._6._6);continue}a=!1,o=dt("The impossible happened in partial function `up`.");continue}if("ThreeRight"===e._1.tag){if("Leaf"===e._1._1.tag&&"Leaf"===e._1._4.tag){a=!1,o=Gn(t)(r)(Un("Three",Wn,e._1._2,e._1._3,Wn,e._1._5,e._1._6,Wn));continue}if("Two"===e._1._4.tag){a=!1,o=g(e._1._1,e._1._4._1,e._1._4._4,n,e._1._2,e._1._4._2,e._1._5,e._1._3,e._1._4._3,e._1._6);continue}if("Three"===e._1._4.tag){a=!1,o=m(e._1._1,e._1._4._1,e._1._4._4,e._1._4._7,n,e._1._2,e._1._4._2,e._1._4._5,e._1._5,e._1._3,e._1._4._3,e._1._4._6,e._1._6);continue}}a=!1,o=dt("The impossible happened in partial function `up`.");continue}if("TwoLeft"===e._1.tag){if("Two"===e._1._3.tag){i=r,u=Un("Three",n,e._1._1,e._1._2,e._1._3._1,e._1._3._2,e._1._3._3,e._1._3._4);continue}if("Three"===e._1._3.tag){a=!1,o=s(n,e._1._3._1,e._1._3._4,e._1._3._7,e._1._1,e._1._3._2,e._1._3._5,e._1._2,e._1._3._3,e._1._3._6);continue}a=!1,o=dt("The impossible happened in partial function `up`.");continue}if("TwoRight"===e._1.tag){if("Two"===e._1._1.tag){i=r,u=Un("Three",e._1._1._1,e._1._1._2,e._1._1._3,e._1._1._4,e._1._2,e._1._3,n);continue}if("Three"===e._1._1.tag){a=!1,o=f(e._1._1._1,e._1._1._4,e._1._1._7,n,e._1._1._2,e._1._1._5,e._1._2,e._1._1._3,e._1._1._6,e._1._3);continue}a=!1,o=dt("The impossible happened in partial function `up`.");continue}if("ThreeLeft"===e._1.tag){if("Two"===e._1._3.tag){a=!1,o=c(n,e._1._3._1,e._1._3._4,e._1._6,e._1._1,e._1._3._2,e._1._4,e._1._2,e._1._3._3,e._1._5);continue}if("Three"===e._1._3.tag){a=!1,o=p(n,e._1._3._1,e._1._3._4,e._1._3._7,e._1._6,e._1._1,e._1._3._2,e._1._3._5,e._1._4,e._1._2,e._1._3._3,e._1._3._6,e._1._5);continue}a=!1,o=dt("The impossible happened in partial function `up`.");continue}if("ThreeMiddle"===e._1.tag){if("Two"===e._1._1.tag){a=!1,o=l(e._1._1._1,e._1._1._4,n,e._1._6,e._1._1._2,e._1._2,e._1._4,e._1._1._3,e._1._3,e._1._5);continue}if("Two"===e._1._6.tag){a=!1,o=_(e._1._1,n,e._1._6._1,e._1._6._4,e._1._2,e._1._4,e._1._6._2,e._1._3,e._1._5,e._1._6._3);continue}if("Three"===e._1._1.tag){a=!1,o=h(e._1._1._1,e._1._1._4,e._1._1._7,n,e._1._6,e._1._1._2,e._1._1._5,e._1._2,e._1._4,e._1._1._3,e._1._1._6,e._1._3,e._1._5);continue}if("Three"===e._1._6.tag){a=!1,o=d(e._1._1,n,e._1._6._1,e._1._6._4,e._1._6._7,e._1._2,e._1._4,e._1._6._2,e._1._6._5,e._1._3,e._1._5,e._1._6._3,e._1._6._6);continue}a=!1,o=dt("The impossible happened in partial function `up`.");continue}if("ThreeRight"===e._1.tag){if("Two"===e._1._4.tag){a=!1,o=g(e._1._1,e._1._4._1,e._1._4._4,n,e._1._2,e._1._4._2,e._1._5,e._1._3,e._1._4._3,e._1._6);continue}if("Three"===e._1._4.tag){a=!1,o=m(e._1._1,e._1._4._1,e._1._4._4,e._1._4._7,n,e._1._2,e._1._4._2,e._1._4._5,e._1._5,e._1._3,e._1._4._3,e._1._4._6,e._1._6);continue}}a=!1,o=dt("The impossible happened in partial function `up`.")}else a=!1,o=n}return o},o=t=>e=>{let r,o=t,i=e,u=!0;for(;u;){const t=o,e=i;if("Two"!==e.tag)if("Three"!==e.tag)u=!1,r=dt("The impossible happened in partial function `removeMaxNode`.");else{if("Leaf"===e._1.tag&&"Leaf"===e._4.tag&&"Leaf"===e._7.tag){u=!1,r=n(A("Cons",Bn("TwoRight",Wn,e._2,e._3),t))(Wn);continue}o=A("Cons",Bn("ThreeRight",e._1,e._2,e._3,e._4,e._5,e._6),t),i=e._7}else{if("Leaf"===e._1.tag&&"Leaf"===e._4.tag){u=!1,r=n(t)(Wn);continue}o=A("Cons",Bn("TwoRight",e._1,e._2,e._3),t),i=e._4}}return r},i=t=>{let e,r=t,n=!0;for(;n;){const t=r;if("Two"!==t.tag)if("Three"!==t.tag)n=!1,e=dt("The impossible happened in partial function `maxNode`.");else{if("Leaf"===t._7.tag){n=!1,e={key:t._5,value:t._6};continue}r=t._7}else{if("Leaf"===t._4.tag){n=!1,e={key:t._2,value:t._3};continue}r=t._4}}return e};return u=N,a=>{let s,f=u,c=a,l=!0;for(;l;){const u=f,a=c;if("Leaf"!==a.tag)if("Two"!==a.tag)if("Three"!==a.tag)r();else{const r=t.compare(e)(a._5),n=t.compare(e)(a._2);if("Leaf"===a._1.tag&&"Leaf"===a._4.tag&&"Leaf"===a._7.tag){if("EQ"===n){l=!1,s=d("Just",J(a._3,Gn(t)(u)(Un("Two",Wn,a._5,a._6,Wn))));continue}if("EQ"===r){l=!1,s=d("Just",J(a._6,Gn(t)(u)(Un("Two",Wn,a._2,a._3,Wn))));continue}if("LT"===n){f=A("Cons",Bn("ThreeLeft",a._2,a._3,a._4,a._5,a._6,a._7),u),c=a._1;continue}if("GT"===n&&"LT"===r){f=A("Cons",Bn("ThreeMiddle",a._1,a._2,a._3,a._5,a._6,a._7),u),c=a._4;continue}f=A("Cons",Bn("ThreeRight",a._1,a._2,a._3,a._4,a._5,a._6),u),c=a._7;continue}if("EQ"===n){const t=i(a._1);l=!1,s=d("Just",J(a._3,o(A("Cons",Bn("ThreeLeft",t.key,t.value,a._4,a._5,a._6,a._7),u))(a._1)));continue}if("EQ"===r){const t=i(a._4);l=!1,s=d("Just",J(a._6,o(A("Cons",Bn("ThreeMiddle",a._1,a._2,a._3,t.key,t.value,a._7),u))(a._4)));continue}if("LT"===n){f=A("Cons",Bn("ThreeLeft",a._2,a._3,a._4,a._5,a._6,a._7),u),c=a._1;continue}if("GT"===n&&"LT"===r){f=A("Cons",Bn("ThreeMiddle",a._1,a._2,a._3,a._5,a._6,a._7),u),c=a._4;continue}f=A("Cons",Bn("ThreeRight",a._1,a._2,a._3,a._4,a._5,a._6),u),c=a._7}else{const r=t.compare(e)(a._2);if("EQ"===r){if("Leaf"===a._4.tag){l=!1,s=d("Just",J(a._3,n(u)(Wn)));continue}const t=i(a._1);l=!1,s=d("Just",J(a._3,o(A("Cons",Bn("TwoLeft",t.key,t.value,a._4),u))(a._1)));continue}if("LT"===r){f=A("Cons",Bn("TwoLeft",a._2,a._3,a._4),u),c=a._1;continue}f=A("Cons",Bn("TwoRight",a._1,a._2,a._3),u),c=a._4}else l=!1,s=m}return s};var u})(t)(e)(n);return"Nothing"===o.tag?n:"Just"===o.tag?o._1._2:void r()},Yn=t=>e=>n=>o=>{const i=e(Dn(t)(n)(o));return"Nothing"===i.tag?Qn(t)(n)(o):"Just"===i.tag?Hn(t)(n)(i._1)(o):void r()},Xn=t=>e=>n=>o=>Vn.foldlWithIndex((n=>o=>i=>Yn(t)((()=>{const t=e(i);return e=>d("Just","Nothing"===e.tag?i:"Just"===e.tag?t(e._1):void r())})())(n)(o)))(o)(n),to=()=>t=>e=>{const r=e.append,n={append:e=>n=>Xn(t)(r)(e)(n)};return{mempty:Wn,Semigroup0:()=>n}};function eo(t){return t.charCodeAt(0)}String.fromCharCode(65535),String.fromCharCode(0),Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY;const ro=function(t){return t.length},no=function(t){return function(e){return e.substring(t)}},oo=function(t){return function(e){if(t>=0&&t<e.length)return e.charAt(t);throw new Error("Data.String.Unsafe.charAt: Invalid index.")}};Array.from;var io="undefined"!=typeof Symbol&&null!=Symbol&&void 0!==Symbol.iterator&&"function"==typeof String.prototype[Symbol.iterator],uo="function"==typeof String.prototype.fromCodePoint;String.prototype.codePointAt;const ao=function(t){return function(e){return io?function(t){for(var r="",n=t[Symbol.iterator](),o=0;o<e;++o){var i=n.next();if(i.done)return r;r+=i.value}return r}:t(e)}},so=t=>{return t>=0&&t<=65535?(e=t,String.fromCharCode(e)):t<0?"\0":"￿";var e},fo=t=>{return t<=65535?so(t):so(0|(e=t-65536|0,r=1024,Math.floor(e/r)+55296))+so(function(t){return function(e){if(0===e)return 0;var r=Math.abs(e);return(t%r+r)%r}}(t-65536|0)(1024)+56320|0);var e,r},co=function(t){return uo?String.fromCodePoint:t}(fo),lo=t=>e=>{if(t<1)return"";const r=(t=>{const e=ro(t);if(0===e)return m;if(1===e)return d("Just",{head:eo(oo(0)(t)),tail:""});const r=eo(oo(1)(t)),n=eo(oo(0)(t));return d("Just",55296<=n&&n<=56319&&56320<=r&&r<=57343?{head:65536+((1024*(n-55296|0)|0)+(r-56320|0)|0)|0,tail:no(2)(t)}:{head:n,tail:no(1)(t)})})(e);return"Just"===r.tag?co(r._1.head)+lo(t-1|0)(r._1.tail):e},_o=ao(lo),go=t=>e=>gn(e,t),po={gEncodeJson:t=>t=>_n},ho={encodeJson:t=>t},mo={encodeJson:bn},yo={encodeJson:bn},vo={encodeJson:t=>t},bo=t=>({encodeJson:(()=>{const e=D(t.encodeJson);return t=>e(t)})()}),wo=t=>e=>r=>()=>({gEncodeJson:n=>o=>{const i=r.reflectSymbol(q),u=t.encodeJson(St(r.reflectSymbol(q))(n));return mn((t=>()=>(t[i]=u,t)))(e.gEncodeJson(n)(q))}});var To=o(736);function So(t){return function(e){return function(r){return function(n){try{var o=To(n,r);return t(o)}catch(t){return e}}}}}function xo(t){return To(t)}function Lo(t){return function(e){return e.toString(t)}}function Jo(t){return function(e){return t.add(e)}}const Eo=Lo(10),Ro={add:Jo,zero:xo(0),mul:function(t){return function(e){return t.multiply(e)}},one:xo(1)},Io=So(y)(m)(10),Ao=t=>e=>{const r=function(t){return function(e){return t.compare(e)}}(t)(e);return 1===r?p:0===r?h:g};function No(t,e,r){return null==t?e:r(t)}const Oo={traverseWithIndex:t=>{const e=Oo.Traversable2().sequence(t);return t=>{const r=Oo.FunctorWithIndex0().mapWithIndex(t);return t=>e(r(t))}},FunctorWithIndex0:()=>rn,FoldableWithIndex1:()=>nn,Traversable2:()=>at};function Fo(t){return new Error(t)}function ko(t){return t.message}function Co(t){return function(e){return function(r){return r.stack?t(r.stack):e}}}function Mo(t){return function(){throw t}}const Po=Co(y)(m),Uo=t=>{const e=t.MonadThrow0().Monad0();return r=>t.catchError(e.Bind1().Apply0().Functor0().map(P)(r))((t=>e.Applicative0().pure(C("Left",t))))};var Bo=function(){var t={},e="Pure",r="Throw",n="Catch",o="Sync",i="Async",u="Bind",a="Bracket",s="Fork",f="Sequential",c="Map",l="Apply",_="Alt",g="Cons",p="Resume",h="Release",d="Finalizer",m="Finalized",y="Forked";function v(t,e,r,n){this.tag=t,this._1=e,this._2=r,this._3=n}function b(t){var e=function(e,r,n){return new v(t,e,r,n)};return e.tag=t,e}function w(t){return new v(e,void 0)}function T(t){try{t()}catch(t){setTimeout((function(){throw t}),0)}}function S(t,e,r){try{return e(r())}catch(e){return t(e)}}function x(t,e,r){try{return e(r)()}catch(e){return r(t(e))(),w}}var L=function(){var t=1024,e=0,r=0,n=new Array(t),o=!1;function i(){var i;for(o=!0;0!==e;)e--,i=n[r],n[r]=void 0,r=(r+1)%t,i();o=!1}return{isDraining:function(){return o},enqueue:function(u){var a;e===t&&(a=o,i(),o=a),n[(r+e)%t]=u,e++,o||i()}}}(),J=0,E=1,R=2,I=3,A=4,N=5,O=6;function F(t,c,l){var _=0,y=J,b=l,w=null,k=null,M=null,P=null,U=null,B=0,W=0,j=null,q=!0;function D(l){for(var W,z,G;;)switch(W=null,z=null,G=null,y){case R:y=E;try{b=M(b),null===P?M=null:(M=P._1,P=P._2)}catch(e){y=N,w=t.left(e),b=null}break;case I:t.isLeft(b)?(y=N,w=b,b=null):null===M?y=N:(y=R,b=t.fromRight(b));break;case E:switch(b.tag){case u:M&&(P=new v(g,M,P)),M=b._2,y=E,b=b._1;break;case e:null===M?(y=N,b=t.right(b._1)):(y=R,b=b._1);break;case o:y=I,b=S(t.left,t.right,b._1);break;case i:return y=A,void(b=x(t.left,b._1,(function(t){return function(){_===l&&(_++,L.enqueue((function(){_===l+1&&(y=I,b=t,D(_))})))}})));case r:y=N,w=t.left(b._1),b=null;break;case n:U=new v(g,b,null===M?U:new v(g,new v(p,M,P),U,k),k),M=null,P=null,y=E,b=b._1;break;case a:B++,U=new v(g,b,null===M?U:new v(g,new v(p,M,P),U,k),k),M=null,P=null,y=E,b=b._1;break;case s:y=I,W=F(t,c,b._2),c&&c.register(W),b._1&&W.run(),b=t.right(W);break;case f:y=E,b=C(t,c,b._1)}break;case N:if(M=null,P=null,null===U)y=O,b=k||w||b;else switch(W=U._3,G=U._1,U=U._2,G.tag){case n:k&&k!==W&&0===B?y=N:w&&(y=E,b=G._2(t.fromLeft(w)),w=null);break;case p:k&&k!==W&&0===B||w?y=N:(M=G._1,P=G._2,y=R,b=t.fromRight(b));break;case a:B--,null===w&&(z=t.fromRight(b),U=new v(g,new v(h,G._2,z),U,W),(k===W||B>0)&&(y=E,b=G._3(z)));break;case h:U=new v(g,new v(m,b,w),U,k),y=E,b=k&&k!==W&&0===B?G._1.killed(t.fromLeft(k))(G._2):w?G._1.failed(t.fromLeft(w))(G._2):G._1.completed(t.fromRight(b))(G._2),w=null,B++;break;case d:B++,U=new v(g,new v(m,b,w),U,k),y=E,b=G._1;break;case m:B--,y=N,b=G._1,w=G._2}break;case O:for(var H in j)j.hasOwnProperty(H)&&(q=q&&j[H].rethrow,T(j[H].handler(b)));return j=null,void(k&&w?setTimeout((function(){throw t.fromLeft(w)}),0):t.isLeft(b)&&q&&setTimeout((function(){if(q)throw t.fromLeft(b)}),0));case J:y=E;break;case A:return}}function z(t){return function(){if(y===O)return q=q&&t.rethrow,t.handler(b)(),function(){};var e=W++;return(j=j||{})[e]=t,function(){null!==j&&delete j[e]}}}return{kill:function(e,r){return function(){if(y===O)return r(t.right(void 0))(),function(){};var n=z({rethrow:!1,handler:function(){return r(t.right(void 0))}})();switch(y){case J:k=t.left(e),y=O,b=k,D(_);break;case A:null===k&&(k=t.left(e)),0===B&&(y===A&&(U=new v(g,new v(d,b(e)),U,k)),y=N,b=null,w=null,D(++_));break;default:null===k&&(k=t.left(e)),0===B&&(y=N,b=null,w=null)}return n}},join:function(t){return function(){var e=z({rethrow:!1,handler:t})();return y===J&&D(_),e}},onComplete:z,isSuspended:function(){return y===J},run:function(){y===J&&(L.isDraining()?D(_):L.enqueue((function(){D(_)})))}}}function k(e,r,n,o){var u=0,a={},s=0,f={},p=new Error("[ParAff] Early exit"),h=null,d=t;function m(r,n,o){var i,u,s=n,f=null,p=null,h=0,d={};t:for(;;)switch(i=null,s.tag){case y:if(s._3===t&&(i=a[s._1],d[h++]=i.kill(r,(function(t){return function(){0==--h&&o(t)()}}))),null===f)break t;s=f._2,null===p?f=null:(f=p._1,p=p._2);break;case c:s=s._2;break;case l:case _:f&&(p=new v(g,f,p)),f=s,s=s._1}if(0===h)o(e.right(void 0))();else for(u=0,i=h;u<i;u++)d[u]=d[u]();return d}function b(r,n,i){var u,a,g,d,y,v;for(e.isLeft(r)?(u=r,a=null):(a=r,u=null);;){if(g=null,d=null,y=null,v=null,null!==h)return;if(null===n)return void o(u||a)();if(n._3!==t)return;switch(n.tag){case c:null===u?(n._3=e.right(n._1(e.fromRight(a))),a=n._3):n._3=u;break;case l:if(g=n._1._3,d=n._2._3,u){if(n._3=u,y=!0,v=s++,f[v]=m(p,u===g?n._2:n._1,(function(){return function(){delete f[v],y?y=!1:null===i?b(u,null,null):b(u,i._1,i._2)}})),y)return void(y=!1)}else{if(g===t||d===t)return;a=e.right(e.fromRight(g)(e.fromRight(d))),n._3=a}break;case _:if(g=n._1._3,d=n._2._3,g===t&&e.isLeft(d)||d===t&&e.isLeft(g))return;if(g!==t&&e.isLeft(g)&&d!==t&&e.isLeft(d))u=a===g?d:g,a=null,n._3=u;else if(n._3=a,y=!0,v=s++,f[v]=m(p,a===g?n._2:n._1,(function(){return function(){delete f[v],y?y=!1:null===i?b(a,null,null):b(a,i._1,i._2)}})),y)return void(y=!1)}null===i?n=null:(n=i._1,i=i._2)}}function T(t){return function(e){return function(){delete a[t._1],t._3=e,b(e,t._2._1,t._2._2)}}}return function(){var o,i,s=E,f=n,p=null,h=null;t:for(;;)switch(o=null,i=null,s){case E:switch(f.tag){case c:p&&(h=new v(g,p,h)),p=new v(c,f._1,t,t),f=f._2;break;case l:p&&(h=new v(g,p,h)),p=new v(l,t,f._2,t),f=f._1;break;case _:p&&(h=new v(g,p,h)),p=new v(_,t,f._2,t),f=f._1;break;default:i=u++,s=N,o=f,f=new v(y,i,new v(g,p,h),t),(o=F(e,r,o)).onComplete({rethrow:!1,handler:T(f)})(),a[i]=o,r&&r.register(o)}break;case N:if(null===p)break t;p._1===t?(p._1=f,s=E,f=p._2,p._2=t):(p._2=f,f=p,null===h?p=null:(p=h._1,h=h._2))}for(d=f,i=0;i<u;i++)a[i].run()}(),function(t){return new v(i,(function(r){return function(){return function(t,r){var n;for(var o in h=e.left(t),f)if(f.hasOwnProperty(o))for(o in n=f[o])n.hasOwnProperty(o)&&n[o]();f=null;var u=m(t,d,r);return function(t){return new v(i,(function(t){return function(){for(var t in u)u.hasOwnProperty(t)&&u[t]();return w}}))}}(t,r)}}))}}function C(t,e,r){return new v(i,(function(n){return function(){return k(t,e,r,n)}}))}return v.EMPTY=t,v.Pure=b(e),v.Throw=b(r),v.Catch=b(n),v.Sync=b(o),v.Async=b(i),v.Bind=b(u),v.Bracket=b(a),v.Fork=b(s),v.Seq=b(f),v.ParMap=b(c),v.ParApply=b(l),v.ParAlt=b(_),v.Fiber=F,v.Supervisor=function(t){var e={},r=0,n=0;return{register:function(t){var o=r++;t.onComplete({rethrow:!0,handler:function(t){return function(){n--,delete e[o]}}})(),e[o]=t,n++},isEmpty:function(){return 0===n},killAll:function(i,u){return function(){if(0===n)return u();var a=0,s={};function f(r){s[r]=e[r].kill(i,(function(e){return function(){delete s[r],a--,t.isLeft(e)&&t.fromLeft(e)&&setTimeout((function(){throw t.fromLeft(e)}),0),0===a&&u()}}))()}for(var c in e)e.hasOwnProperty(c)&&(a++,f(c));return e={},r=0,n=0,function(t){return new v(o,(function(){for(var t in s)s.hasOwnProperty(t)&&s[t]()}))}}}}},v.Scheduler=L,v.nonCanceler=w,v}();const Wo=Bo.Pure,jo=Bo.Throw;function qo(t){return function(e){return Bo.Catch(t,e)}}function Do(t){return function(e){return e.tag===Bo.Pure.tag?Bo.Pure(t(e._1)):Bo.Bind(e,(function(e){return Bo.Pure(t(e))}))}}function zo(t){return function(e){return Bo.Bind(t,e)}}const Go=Bo.Sync,Ho=Bo.Async;function $o(t,e){return function(){return Bo.Fiber(t,null,e)}}Bo.Seq;const Vo={map:Do},Zo={isLeft:t=>"Left"===t.tag||"Right"!==t.tag&&void r(),fromLeft:t=>"Left"===t.tag?t._1:"Right"===t.tag?dt("unsafeFromLeft: Right"):void r(),fromRight:t=>"Right"===t.tag?t._1:"Left"===t.tag?dt("unsafeFromRight: Left"):void r(),left:M,right:P},Ko={Applicative0:()=>Xo,Bind1:()=>Qo},Qo={bind:zo,Apply0:()=>Yo},Yo={apply:t=>e=>zo(t)((t=>zo(e)((e=>Xo.pure(t(e)))))),Functor0:()=>Vo},Xo={pure:Wo,Apply0:()=>Yo},ti={liftEffect:Go,Monad0:()=>Ko},ei={throwError:jo,Monad0:()=>Ko},ri={catchError:qo,MonadThrow0:()=>ei},ni=(()=>{const t=Wo();return e=>t})(),oi={liftEffect:t=>t,Monad0:()=>Ur},ii=t=>({bind:e=>n=>t.Bind1().bind(e)((e=>"Left"===e.tag?t.Applicative0().pure(C("Left",e._1)):"Right"===e.tag?n(e._1):void r())),Apply0:()=>ui(t)}),ui=t=>{const e=t.Bind1().Apply0().Functor0(),n={map:t=>e.map((e=>"Left"===e.tag?C("Left",e._1):"Right"===e.tag?C("Right",t(e._1)):void r()))};return{apply:(()=>{const e=ii(t);return r=>n=>e.bind(r)((r=>e.bind(n)((e=>ai(t).pure(r(e))))))})(),Functor0:()=>n}},ai=t=>({pure:e=>t.Applicative0().pure(C("Right",e)),Apply0:()=>ui(t)}),si=t=>{const e=t.Monad0(),r={Applicative0:()=>ai(e),Bind1:()=>ii(e)};return{liftEffect:r=>e.Bind1().bind(t.liftEffect(r))((t=>e.Applicative0().pure(C("Right",t)))),Monad0:()=>r}},fi=t=>{const e={Applicative0:()=>ai(t),Bind1:()=>ii(t)};return{throwError:e=>t.Applicative0().pure(C("Left",e)),Monad0:()=>e}};function ci(t){return Object.prototype.toString.call(t).slice(8,-1)}function li(t){return void 0===t}Array.isArray;const _i=(t,e,r)=>({tag:t,_1:e,_2:r}),gi=t=>e=>r=>ci(r)===e?ai(t).pure(r):fi(t).throwError(L(_i("TypeMismatch",e,ci(r)),N)),pi=(t,e,r)=>({tag:t,_1:e,_2:r}),hi=t=>e=>pi("AtKey",t,e),di=t=>e=>pi("Named",t,e),mi=pi("MissingValue"),yi={show:t=>"TypeMismatch"===t.tag?"(TypeMismatch "+l(t._1)+")":"UnexpectedValue"===t.tag?"(UnexpectedValue "+Tn(t._1)+")":"AtIndex"===t.tag?"(AtIndex "+c(t._1)+" "+yi.show(t._2)+")":"AtKey"===t.tag?"(AtKey "+l(t._1)+" "+yi.show(t._2)+")":"Named"===t.tag?"(Named "+l(t._1)+" "+yi.show(t._2)+")":"MissingValue"===t.tag?"MissingValue":void r()},vi=(()=>{const t=(t=>{const e=t.Apply0();return r=>n=>vn((t=>n=>o=>e.apply(e.Functor0().map((t=>e=>mn((t=>()=>(t[n]=e,t)))(t)))(t))(r(n)(o))))(t.pure(_n))(n)})(j);return e=>t((t=>e))})(),bi=(()=>Oo.traverseWithIndex(j))(),wi=t=>e=>n=>{const o=hi(n),i=hn(m,y,n,e);if("Nothing"===i.tag)return C("Left",pi("AtKey",n,mi));if("Just"===i.tag){const e=t(i._1);if("Left"===e.tag)return C("Left",o(e._1));if("Right"===e.tag)return C("Right",e._1)}r()},Ti=t=>{const e=Sn((t=>C("Left",pi("TypeMismatch","Number"))),(t=>C("Left",pi("TypeMismatch","Number"))),P,(t=>C("Left",pi("TypeMismatch","Number"))),(t=>C("Left",pi("TypeMismatch","Number"))),(t=>C("Left",pi("TypeMismatch","Number"))),t);if("Left"===e.tag)return C("Left",e._1);if("Right"===e.tag){const t=En(e._1);if("Nothing"===t.tag)return C("Left",pi("TypeMismatch","Integer"));if("Just"===t.tag)return C("Right",t._1)}r()},Si=t=>{const e=di("ForeignObject"),n=vi(t);return t=>{const o=(t=>{const e=Sn((t=>m),(t=>m),(t=>m),(t=>m),(t=>m),y,t);return"Nothing"===e.tag?C("Left",pi("TypeMismatch","Object")):"Just"===e.tag?C("Right",e._1):void r()})(t);if("Left"===o.tag)return C("Left",o._1);if("Right"===o.tag){const t=n(o._1);if("Left"===t.tag)return C("Left",e(t._1));if("Right"===t.tag)return C("Right",t._1)}r()}},xi=t=>{const e=di("Array"),n=bi((e=>{const n=(o=e,t=>pi("AtIndex",o,t));var o;return e=>{const o=t(e);return"Left"===o.tag?C("Left",n(o._1)):"Right"===o.tag?C("Right",o._1):void r()}}));return t=>{const o=(t=>{const e=Sn((t=>m),(t=>m),(t=>m),(t=>m),y,(t=>m),t);return"Nothing"===e.tag?C("Left",pi("TypeMismatch","Array")):"Just"===e.tag?C("Right",e._1):void r()})(t);if("Left"===o.tag)return C("Left",o._1);if("Right"===o.tag){const t=n(o._1);if("Left"===t.tag)return C("Left",e(t._1));if("Right"===t.tag)return C("Right",t._1)}r()}},Li={gDecodeJson:t=>t=>C("Right",{})},Ji=t=>e=>n=>()=>()=>({gDecodeJson:o=>i=>{const u=n.reflectSymbol(q),a=t.decodeJsonField(hn(m,y,u,o));if("Just"===a.tag){const t=hi(u);if("Left"===a._1.tag)return C("Left",t(a._1._1));if("Right"===a._1.tag){const t=a._1._1,i=e.gDecodeJson(o)(q);return(()=>{if("Left"===i.tag){const t=i._1;return e=>C("Left",t)}if("Right"===i.tag){const t=i._1;return e=>e(t)}r()})()((e=>C("Right",xt(n.reflectSymbol(q))(t)(e))))}r()}if("Nothing"===a.tag)return C("Left",pi("AtKey",u,mi));r()}}),Ei=function(t){return function(e){var r=t.lastIndex,n=t.test(e);return t.lastIndex=r,n}},Ri={global:!1,ignoreCase:!1,multiline:!1,dotAll:!1,sticky:!1,unicode:!1},Ii=t=>e=>{const n=(t=>e=>{return(r=M,function(t){return function(e){return function(n){try{return t(new RegExp(e,n))}catch(t){return r(t.message)}}}})(P)(t)((e.global?"g":"")+(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.dotAll?"s":"")+(e.sticky?"y":"")+(e.unicode?"u":""));var r})(t)(e);return"Left"===n.tag?dt(n._1):"Right"===n.tag?n._1:void r()};var Ai=o(257);const Ni=(()=>{const t=Ii("^[0-9a-f]*$")(Ri),e=Ii("^[0-9a-fA-F]*$")(Ri);return r=>Ei(t)(r)?d("Just",r):Ei(e)(r)?d("Just",r.toLowerCase()):m})();function Oi(t,e,r){return r.then(t,e)}function Fi(t){return Promise.resolve(t)}const ki=t=>{const e=(n=m,(o=t)instanceof Error?y(o):n);var n,o;const i=gi(rt)("String")(t),u=(()=>{const t="Left"===i.tag?m:"Right"===i.tag?d("Just",Fo(i._1)):void r();return"Nothing"===e.tag?t:e})();return"Nothing"===u.tag?Fo("Promise failed, couldn't extract JS Error or String"):"Just"===u.tag?u._1:void r()};o(818);const Ci=t,Mi=function(){return new Promise(((t,e)=>{t(Ci)}))},Pi=Mr(oi),Ui=kr(Br),Bi=(()=>{const t={map:t=>e=>r=>{const n=e(r);return()=>{const e=n();return t(e)}}},e={apply:t=>e=>r=>{const n=t(r),o=e(r);return()=>n()(o())},Functor0:()=>t};return{pure:t=>e=>()=>t,Apply0:()=>e}})(),Wi=Z(jr)(F)(V),ji=(()=>{const t=Cr(Ur);return e=>t.Bind1().Apply0().Functor0().map(e)(Pr)})(),qi=wo((()=>{const t=wo(mo)(wo(bo(mo))(po)({reflectSymbol:()=>"op_costs"})())({reflectSymbol:()=>"language"})();return{encodeJson:e=>t.gEncodeJson(e)(q)}})()),Di={reflectSymbol:()=>"PlutusV1"},zi=(()=>{const t=qi(po)(Di)();return e=>t.gEncodeJson(e)(q)})(),Gi=qi(po)({reflectSymbol:()=>"PlutusV2"})(),Hi=(()=>{const t=qi(Gi)(Di)();return e=>t.gEncodeJson(e)(q)})(),$i=Kn(pt)(K),Vi=Cr(Ur),Zi=(()=>{const t=Oo.traverseWithIndex(Bi);return e=>r=>t(r)(e)})(),Ki=t=>e=>()=>{const r={value:N},n=()=>Wi(r.value)(),o=e({frees:r,lib:t});return(i=t=>()=>(n(),Mo(t)()),function(t){return function(){try{return t()}catch(t){return t instanceof Error||"[object Error]"===Object.prototype.toString.call(t)?i(t)():i(new Error(t.toString()))()}}})((()=>{const t=o();return n(),t}))();var i},Qi=zo(Go(Mi))((t=>{const e=No(t,m,y);return"Nothing"===e.tag?Wo(m):"Just"===e.tag?qo(Do(y)((n=ki,t=>Ho((e=>()=>(Oi((t=>Fi(e(C("Right",t))())),(t=>Fi(e(C("Left",n(t)))())),t),ni))))(e._1)))((()=>{const t=Wo(m);return e=>t})()):void r();var n})),Yi=t=>e=>{const r=Kt.is_valid_bech32(t.Address)(e);return()=>r()?d("Just",e):m},Xi=ji((t=>t.lib)),tu=t=>e=>{const r=Xi(e);return()=>{const e=r();return t(e)}},eu=()=>t=>Ui.bind(ji((t=>t.frees)))((e=>Ui.bind(Pi.liftEffect(t))((t=>Ui.bind(li(t)?Bi.pure():Pi.liftEffect((()=>{const r=O((()=>vt("free",t)));return()=>{const t=e.value;e.value=r(t)}})()))((()=>Bi.pure(t))))))),ru=()=>t=>Ui.bind(ji((t=>t.frees)))((e=>Ui.bind(Pi.liftEffect(t))((t=>Ui.bind(Pi.liftEffect((()=>{const r=O((()=>vt("free",t)));return()=>{const t=e.value;e.value=r(t)}})()))((()=>Bi.pure(t))))))),nu=(()=>{const t={language:"PlutusV2",op_costs:D(c)([205665,812,1,1,1e3,571,0,1,1e3,24177,4,1,1e3,32,117366,10475,4,23e3,100,23e3,100,23e3,100,23e3,100,23e3,100,23e3,100,100,100,23e3,100,19537,32,175354,32,46417,4,221973,511,0,1,89141,32,497525,14068,4,2,196500,453240,220,0,1,1,1e3,28662,4,2,245e3,216773,62,1,1060367,12586,1,208512,421,1,187e3,1e3,52998,1,80436,32,43249,32,1e3,32,80556,1,57667,4,1e3,10,197145,156,1,197145,156,1,204924,473,1,208896,511,1,52467,32,64832,32,65493,32,22558,32,16563,32,76511,32,196500,453240,220,0,1,1,69522,11687,0,1,60091,32,196500,453240,220,0,1,1,196500,453240,220,0,1,1,1159724,392670,0,2,806990,30482,4,1927926,82523,4,265318,0,4,0,85931,32,205665,812,1,1,41182,32,212342,32,31220,32,32696,32,43357,32,32247,32,38314,32,35892428,10,57996947,18975,10,38887044,32947,10])},e={language:"PlutusV1",op_costs:D(c)([205665,812,1,1,1e3,571,0,1,1e3,24177,4,1,1e3,32,117366,10475,4,23e3,100,23e3,100,23e3,100,23e3,100,23e3,100,23e3,100,100,100,23e3,100,19537,32,175354,32,46417,4,221973,511,0,1,89141,32,497525,14068,4,2,196500,453240,220,0,1,1,1e3,28662,4,2,245e3,216773,62,1,1060367,12586,1,208512,421,1,187e3,1e3,52998,1,80436,32,43249,32,1e3,32,80556,1,57667,4,1e3,10,197145,156,1,197145,156,1,204924,473,1,208896,511,1,52467,32,64832,32,65493,32,22558,32,16563,32,76511,32,196500,453240,220,0,1,1,69522,11687,0,1,60091,32,196500,453240,220,0,1,1,196500,453240,220,0,1,1,806990,30482,4,1927926,82523,4,265318,0,4,0,85931,32,205665,812,1,1,41182,32,212342,32,31220,32,32696,32,43357,32,32247,32,38314,32,57996947,18975,10])};return Ui.bind(tu((t=>t.Costmdls)))((r=>Ui.bind(ru()(Xt.from_json(r)(Tn(zi({PlutusV1:t})))))((n=>Ui.bind(ru()(Xt.from_json(r)(Tn(Gi.gEncodeJson({PlutusV2:t})(q)))))((o=>Ui.bind(ru()(Xt.from_json(r)(Tn(Hi({PlutusV1:e,PlutusV2:t})))))((t=>Bi.pure({pv1:n,pv2:o,pv1AndPv2:t})))))))))})(),ou=t=>Ui.bind(Pi.liftEffect(("utf8",function(){return new TextDecoder("utf8")})))((e=>Ui.bind(eu()(nr.multiasset(t)))((e=>Ui.bind(ru()(nr.coin(t)))((t=>{return Ui.bind((n=t,Ui.bind(Pi.liftEffect(yr.to_str(n)))((t=>{const e=Io(t);return"Just"===e.tag?Bi.pure(e._1):Pi.liftEffect(Mo(Fo("CardanoMultiplatformLib.valueFromCbor: Failed to parse BigInt: "+t)))}))))((t=>{const n=li(e)?m:d("Just",e),o=(()=>{if("Nothing"===n.tag)return Bi.pure(Wn);if("Just"===n.tag){const t=n._1;return Ui.bind(ru()(hr.keys(t)))((e=>Ui.bind(Pi.liftEffect(Or.len(e)))((n=>{const o=Zi(Dr(n)())((n=>o=>Ui.bind(ru()(Or.get(e)(n)))((e=>Ui.bind(Pi.liftEffect(Fr.to_hex(e)))((n=>Ui.bind(eu()(hr.get(t)(e)))((o=>{const i=li(o)?m:d("Just",o);return"Nothing"===i.tag?Bi.pure(J(n,Wn)):"Just"===i.tag?Ui.bind(ru()(br.keys(i._1)))((r=>Ui.bind(Pi.liftEffect(wr.len(r)))((o=>{const i=Zi(Dr(o)())((n=>o=>Ui.bind(ru()(wr.get(r)(n)))((r=>Ui.bind(Pi.liftEffect(Tr.name(r)))((n=>{const o=Ai.c(n);return Ui.bind(ru()(hr.get_asset(t)(e)(r)))((t=>Ui.bind(Pi.liftEffect(yr.to_str(t)))((t=>{const e=Io(t);return"Just"===e.tag?Bi.pure(J(o,e._1)):Pi.liftEffect(Mo(Fo("CardanoMultiplatformLib.valueFromCbor: Failed to parse BigInt: "+t)))}))))}))))));return t=>{const e=i(t);return()=>{const t=e();return J(n,$i(t))}}})))):void r()}))))))));return t=>{const e=o(t);return()=>{const t=e();return $i(t)}}}))))}r()})();return e=>{const r=o(e);return()=>{const e=r();return Xn(pt)(Xn(pt)(Jo))(Un("Two",Wn,"",Un("Two",Wn,"",t,Wn),Wn))(e)}}}));var n}))))));o(400);const iu=t=>Eo(t),uu={append:function(t){return function(e){return 0===t.length?e:0===e.length?t:t.concat(e)}}},au={mempty:[],Semigroup0:()=>uu},su=(t,e,r)=>({tag:t,_1:e,_2:r}),fu=(t,e)=>({tag:"NonAdaAssetId",_1:t,_2:e}),cu=(()=>{const t=at.traverse(j);return e=>r=>t(r)(e)})(),lu=yn(K),_u=(()=>K.foldMap(au)(V))(),gu=su("AdaAssetId"),pu={append:t=>e=>Jo(t)(e)},hu={append:t=>e=>Jo(t)(e)},du=(()=>({mempty:Ro.zero,Semigroup0:()=>hu}))(),mu={eq:t=>e=>function(t){return function(e){return t.equals(e)}}(t)(e)},yu={eq:t=>e=>"AdaAssetId"===t.tag?"AdaAssetId"===e.tag:"AssetId"===t.tag&&"AssetId"===e.tag&&t._1===e._1&&t._2===e._2},vu=Zn(yu)(mu),bu={compare:t=>e=>{if("AdaAssetId"===t.tag)return"AdaAssetId"===e.tag?h:g;if("AdaAssetId"===e.tag)return p;if("AssetId"===t.tag&&"AssetId"===e.tag){const r=pt.compare(t._1)(e._1);return"LT"===r?g:"GT"===r?p:pt.compare(t._2)(e._2)}r()},Eq0:()=>yu},wu=(()=>{const t=(t=>{const e=Kn(t)(Fn);return t=>{const r=Mn((e=>t(e._1)(e._2)));return t=>e(r(qn(Cn)(t)))}})(bu);return e=>t((t=>e))})(),Tu=Kn(bu)(K),Su=to()(bu)(pu),xu=t=>e=>wu((t=>"GT"===Ao(t)(Ro.zero)))(Xn(bu)((t=>e=>{return(r=t,function(t){return r.minus(t)})(e);var r}))(t)(e)),Lu=t=>e=>{const n=Dn(bu)(e)(t);return"Nothing"===n.tag?Ro.zero:"Just"===n.tag?n._1:void r()},Ju=t=>{const e=Dn(bu)(gu)(t);return 1===jn(t)&&"Nothing"!==e.tag&&("Just"===e.tag||void r())},Eu=t=>{const e=Ni(t);return"Just"===e.tag?56===ro(e._1)?d("Just",e._1):m:"Nothing"===e.tag?m:void r()},Ru=t=>{return(e=pt,t=>n=>t.foldl((t=>o=>{const i=o._2;return Yn(e)((t=>"Just"===t.tag?d("Just",n(i)(t._1)):"Nothing"===t.tag?d("Just",i):void r()))(o._1)(t)}))(Wn))(K)(Xn(pt)(Jo))(D((t=>"AdaAssetId"===t._1.tag?J("",Un("Two",Wn,"",t._2,Wn)):"AssetId"===t._1.tag?J(t._1._1,Un("Two",Wn,t._1._2,t._2,Wn)):void r()))(qn(ln)(t)));var e},Iu=t=>gn(lu(qn(ln)(zn.map((t=>lu(qn(ln)(zn.map(iu)(t)))))(Ru(t)))),go(bn)),Au=t=>{const e=cu(qn(ln)(zn.map(qn(ln))(t)))((t=>{if(""===t._1)return 1===t._2.length&&""===t._2[0]._1?C("Right",[J(gu,t._2[0]._2)]):C("Left",'Only "" is allowed as token name for ADA.');const e=Eu(t._1);if("Nothing"===e.tag)return C("Left","Invalid policy ID: "+t._1);if("Just"===e.tag){const r=e._1;return cu(t._2)((t=>{const e="Invalid asset name - expecting hex: "+t._1,n=Ni(t._1);return"Just"===n.tag?C("Right",J(su("AssetId",r,n._1),t._2)):C("Left",e)}))}r()}));return"Left"===e.tag?C("Left",e._1):"Right"===e.tag?C("Right",Tu(_u(e._1))):void r()},Nu=(()=>{const t=wo(mo)(wo(mo)(wo({encodeJson:(e=bn,t=>"Nothing"===t.tag?wn:"Just"===t.tag?e(t._1):void r())})(po)({reflectSymbol:()=>"stack"})())({reflectSymbol:()=>"name"})())({reflectSymbol:()=>"msg"})();var e;return e=>t.gEncodeJson(e)(q)})(),Ou=t=>{return Nu({name:(e=t,e.name||"Error"),msg:ko(t),stack:Po(t)});var e},Fu=(()=>{return(t=k,e=>{const n=e.Bind1(),o=e.Applicative0(),i=n.Apply0().Functor0(),u={map:t=>i.map((e=>"Left"===e.tag?C("Left",e._1):"Right"===e.tag?C("Right",t(e._1)):void r()))};return{alt:e=>i=>n.bind(e)((e=>{if("Right"===e.tag)return o.pure(C("Right",e._1));if("Left"===e.tag){const u=e._1;return n.bind(i)((e=>"Right"===e.tag?o.pure(C("Right",e._1)):"Left"===e.tag?o.pure(C("Left",t.append(u)(e._1))):void r()))}r()})),Functor0:()=>u}})(rt).alt;var t})(),ku=t=>e=>Ho((r=>{const n=(o=e,function(t){return function(e){return function(){o.then(e,t)}}})((e=>r(C("Left",t(e)))()))((t=>r(C("Right",t))()));var o;return()=>(n(),ni)})),Cu=t=>{const e=Fu(gi(rt)("Error")(t))((()=>{const e=gi(rt)("String")(t);return"Left"===e.tag?C("Left",e._1):"Right"===e.tag?C("Right",Fo(e._1)):void r()})());return"Left"===e.tag?Fo("Promise failed, couldn't extract JS Error or String"):"Right"===e.tag?e._1:void r()};function Mu(t,e){return fetch(t,e)}function Pu(t){return new Headers(t)}const Uu=(t=>t)("POST"),Bu=t=>"OPTIONS"===t?"OPTIONS":"GET"===t?"GET":"HEAD"===t?"HEAD":"POST"===t?"POST":"PUT"===t?"PUT":"DELETE"===t?"DELETE":"TRACE"===t?"TRACE":"CONNECT"===t?"CONNECT":"PROPFIND"===t?"PROPFIND":"PROPPATCH"===t?"PROPPATCH":"MKCOL"===t?"MKCOL":"COPY"===t?"COPY":"MOVE"===t?"MOVE":"LOCK"===t?"LOCK":"UNLOCK"===t?"UNLOCK":"PATCH"===t?"PATCH":void r();function Wu(t,e){try{return new Request(t,e)}catch(t){throw console.error(t),t}}function ju(t){return t.ok}function qu(t){return t.redirected}function Du(t){return t.status}function zu(t){return t.statusText}function Gu(t){return t.url}function Hu(t){return function(){return t.body}}const $u=t=>{const e=(r=t,function(){return r.text()});var r;return zo(Go((()=>e())))(ku(Cu))},Vu=t=>{const e=(r=t,function(){return r.json()});var r;return zo(Go((()=>e())))(ku(Cu))},Zu=t=>{const e=(r=t,function(){return r.blob()});var r;return zo(Go((()=>e())))(ku(Cu))},Ku=t=>{const e=(r=t,function(){return r.arrayBuffer()});var r;return zo(Go((()=>e())))(ku(Cu))},Qu=t=>{return{headers:(e=t,e.headers),ok:ju(t),redirected:qu(t),status:Du(t),statusText:zu(t),url:Gu(t),text:$u(t),json:Vu(t),body:Hu(t),arrayBuffer:Ku(t),blob:Zu(t)};var e},Yu=(t,e)=>({tag:t,_1:e}),Xu=(()=>{const t=wo({encodeJson:go(bn)})(wo(yo)(wo(yo)(wo(vo)(wo(mo)(wo(mo)(po)({reflectSymbol:()=>"url"})())({reflectSymbol:()=>"statusText"})())({reflectSymbol:()=>"status"})())({reflectSymbol:()=>"redirected"})())({reflectSymbol:()=>"ok"})())({reflectSymbol:()=>"headers"})();return e=>t.gEncodeJson(e)(q)})(),ta=yn(K),ea=(()=>ii(Ko).bind)(),ra=(()=>ai(Ko).pure)(),na=(()=>fi(Ko).throwError)(),oa=()=>()=>t=>e=>r=>n=>ea(qo(Do(P)(zo(Go((()=>{const n=t.convert(r);return()=>Wu(e,n)})()))((t=>zo(zo(Go((()=>Mu(t,{}))))(ku(Cu)))((t=>Wo(Qu(t))))))))((t=>Wo(C("Left",{type:"fetchError",value:Yu("FetchError",t)})))))((t=>Xr(lt)(t.status)(n)?ra(t):na({type:"fetchError",value:Yu("InvalidStatusCode",t)}))),ia=t=>{return"InvalidStatusCode"===t.tag?(o=t._1,Xu({headers:ta((e=E,n=o.headers,Array.from(n.entries(),(function(t){return e(t[0])(t[1])})))),ok:o.ok,redirected:o.redirected,status:o.status,statusText:o.statusText,url:o.url})):"FetchError"===t.tag?Ou(t._1):void r();var e,n,o},ua=()=>()=>t=>e=>r=>n=>o=>ea(qo(Do(P)(zo(Go((()=>{const n=t.convert(r);return()=>Wu(e,n)})()))((t=>zo(zo(Go((()=>Mu(t,{}))))(ku(Cu)))((t=>Wo(Qu(t))))))))((t=>Wo(C("Left",o(Yu("FetchError",t)))))))((t=>Xr(lt)(t.status)(n)?ra(t):na(o(Yu("InvalidStatusCode",t)))));function aa(t,e,r){try{return e(function(t){return t.replace(/[!'()*]/g,(function(t){return"%"+t.charCodeAt(0).toString(16)}))}(encodeURIComponent(r)).replace(/%20/g,"+"))}catch(e){return t(e)}}const sa=(()=>at.traverse(S))(),fa=(()=>{const t=b.map((n="&",function(t){return t.join(n)})),e=sa((t=>"Nothing"===t._2.tag?aa((t=>m),y,t._1):"Just"===t._2.tag?w.apply((()=>{const e=aa((t=>m),y,t._1);return"Just"===e.tag?d("Just",(()=>{const t=e._1;return e=>t+"="+e})()):m})())(aa((t=>m),y,t._2._1)):void r()));var n;return r=>t(e(r))})(),ca=(()=>Vn.foldMapWithIndex(au))(),la=Kn(pt)(K),_a=t=>({bind:e=>n=>t.Bind1().bind(e)((e=>"Nothing"===e.tag?t.Applicative0().pure(m):"Just"===e.tag?n(e._1):void r())),Apply0:()=>ga(t)}),ga=t=>{const e=t.Bind1().Apply0().Functor0(),r={map:t=>r=>e.map(b.map(t))(r)};return{apply:(()=>{const e=_a(t);return r=>n=>e.bind(r)((r=>e.bind(n)((e=>pa(t).pure(r(e))))))})(),Functor0:()=>r}},pa=t=>({pure:e=>t.Applicative0().pure(d("Just",e)),Apply0:()=>ga(t)}),ha={liftAff:t=>t,MonadEffect0:()=>ti};function da(t){return t}const ma={convertHelper:t=>t=>({})},ya={convertImpl:t=>Bu},va=t=>()=>()=>()=>e=>r=>()=>()=>({convertHelper:n=>n=>xt(e.reflectSymbol(q))(t.convertImpl(q)(St(e.reflectSymbol(q))(n)))(r.convertHelper(q)(Lt(e.reflectSymbol(q))(n)))}),ba={eq:t=>e=>t===e},wa={compare:t=>e=>pt.compare(t)(e),Eq0:()=>ba},Ta=(()=>(t=>{const e=t.Eq0();return r=>{const n=r.Eq0(),o={eq:t=>r=>e.eq(t._1)(r._1)&&n.eq(t._2)(r._2)};return{compare:e=>n=>{const o=t.compare(e._1)(n._1);return"LT"===o?g:"GT"===o?p:r.compare(e._2)(n._2)},Eq0:()=>o}}})(wa)(ht).compare)(),Sa=t=>e=>Ta(J(t.txId,t.txIx))(J(e.txId,e.txIx)),xa=t=>e=>(t=>e=>t.address===e.address&&("Nothing"===t.datumHash.tag?"Nothing"===e.datumHash.tag:"Just"===t.datumHash.tag&&"Just"===e.datumHash.tag&&t.datumHash._1===e.datumHash._1)&&vu.eq(t.value)(e.value))(t.txOut)(e.txOut)&&t.txOutRef.txId===e.txOutRef.txId&&t.txOutRef.txIx===e.txOutRef.txIx,La={encodeJson:t=>t},Ja=t=>{const e=Sn((t=>C("Left",pi("TypeMismatch","String"))),(t=>C("Left",pi("TypeMismatch","String"))),(t=>C("Left",pi("TypeMismatch","String"))),P,(t=>C("Left",pi("TypeMismatch","String"))),(t=>C("Left",pi("TypeMismatch","String"))),t);return"Left"===e.tag?C("Left",e._1):"Right"===e.tag?C("Right",e._1):void r()},Ea=(t,e)=>({tag:t,_1:e}),Ra=ai(Ko),Ia=Kn(bu)(K),Aa=(()=>{const t=at.traverse(S);return e=>r=>t(r)(e)})(),Na=Si(P),Oa=Ji({decodeJsonField:t=>"Just"===t.tag?d("Just",Sn((t=>C("Left",pi("TypeMismatch","String"))),(t=>C("Left",pi("TypeMismatch","String"))),(t=>C("Left",pi("TypeMismatch","String"))),P,(t=>C("Left",pi("TypeMismatch","String"))),(t=>C("Left",pi("TypeMismatch","String"))),t._1)):m}),Fa=(()=>{return e={decodeJson:xi((t=Oa(Oa(Li)({reflectSymbol:()=>"unit"})()())({reflectSymbol:()=>"quantity"})()(),()=>({decodeJson:e=>{const n=Sn((t=>m),(t=>m),(t=>m),(t=>m),(t=>m),y,e);return"Just"===n.tag?t.gDecodeJson(n._1)(q):"Nothing"===n.tag?C("Left",pi("TypeMismatch","Object")):void r()}}))().decodeJson)},wi(e.decodeJson);var t,e})(),ka=(()=>ii(Ko).bind)(),Ca=(()=>ua()()({convert:va({convertImpl:t=>da})()()()({reflectSymbol:()=>"body"})(va({convertImpl:t=>Pu})()()()({reflectSymbol:()=>"headers"})(va(ya)()()()({reflectSymbol:()=>"method"})(ma)()())()())()().convertHelper(q)}))(),Ma=t=>t,Pa=(()=>{const t=dn(E);return e=>la(t(e))})(),Ua=(()=>({convert:va({convertImpl:t=>Pu})()()()({reflectSymbol:()=>"headers"})(ma)()().convertHelper(q)}))(),Ba=(()=>(t=>{const e=t.MonadEffect0(),r=si(e);return{liftAff:(()=>{const r=e.Monad0();return e=>r.Bind1().bind(t.liftAff(e))((t=>r.Applicative0().pure(C("Right",t))))})(),MonadEffect0:()=>r}})(ha).liftAff)(),Wa={decodeJson:xi(P)},ja=(()=>{const t=at.traverse(j);return e=>r=>t(r)(e)})(),qa=(()=>{const t=xi(Ja);return e=>{const n=t(e);return"Left"===n.tag?C("Left",{type:"jsonDecodeError",value:n._1}):"Right"===n.tag?C("Right",n._1):void r()}})(),Da=t=>e=>n=>{const o=Na(n);return(()=>{if("Left"===o.tag){const t=o._1;return e=>C("Left",t)}if("Right"===o.tag){const t=o._1;return e=>e(t)}r()})()((n=>{const o=wi(xn(C("Left",pi("TypeMismatch","String")))(P))(n)("address");return(()=>{if("Left"===o.tag){const t=o._1;return e=>C("Left",t)}if("Right"===o.tag){const t=o._1;return e=>e(t)}r()})()((o=>{const i=Yi(t)(o)(),u="Nothing"===i.tag?C("Left",pi("TypeMismatch","Invalid Bech32")):"Just"===i.tag?C("Right",i._1):void r();return(()=>{if("Left"===u.tag){const t=u._1;return e=>C("Left",t)}if("Right"===u.tag){const t=u._1;return e=>e(t)}r()})()((t=>{const o=Fa(n)("amount");return(()=>{if("Left"===o.tag){const t=o._1;return e=>C("Left",t)}if("Right"===o.tag){const t=o._1;return e=>e(t)}r()})()((o=>{const i=(t=>{const e=Aa(t)((t=>{const e=(t=>{if("lovelace"===t)return d("Just",gu);const e=(t=>{const e=_o(56)(t);return{before:e,after:no(ro(e))(t)}})(t),n=Eu(e.before);if("Just"===n.tag){const t=Ni(e.after);return"Just"===t.tag?d("Just",su("AssetId",n._1,t._1)):m}if("Nothing"===n.tag)return m;r()})(t.unit);if("Just"===e.tag){const r=Io(t.quantity);return"Just"===r.tag?d("Just",J(e._1,r._1)):m}if("Nothing"===e.tag)return m;r()}));return"Just"===e.tag?d("Just",Ia(e._1)):m})(o);if("Nothing"===i.tag)return C("Left",pi("TypeMismatch","Invalid amount value"));if("Just"===i.tag){const o=(u=xn(C("Left",pi("TypeMismatch","String")))(P),t=>e=>{const n=hn(m,y,e,t);if("Nothing"===n.tag)return C("Right",m);if("Just"===n.tag){if(Sn((t=>!0),(t=>!1),(t=>!1),(t=>!1),(t=>!1),(t=>!1),n._1))return C("Right",m);const t=hi(e),r=u(n._1);if("Left"===r.tag)return C("Left",t(r._1));if("Right"===r.tag)return C("Right",d("Just",r._1))}r()})(n)("data_hash");if("Left"===o.tag)return C("Left",o._1);if("Right"===o.tag){const u="Just"===o._1.tag?d("Just",o._1._1):m,a=wi(Ti)(n)("output_index");return(()=>{if("Left"===a.tag){const t=a._1;return e=>C("Left",t)}if("Right"===a.tag){const t=a._1;return e=>e(t)}r()})()((o=>{if("Just"===e.tag)return C("Right",{txOutRef:{txId:e._1,txIx:o},txOut:{address:t,value:i._1,datumHash:u}});if("Nothing"===e.tag){const e=wi(xn(C("Left",pi("TypeMismatch","String")))(P))(n)("tx_hash");if("Left"===e.tag)return C("Left",e._1);if("Right"===e.tag)return C("Right",{txOutRef:{txId:e._1,txIx:o},txOut:{address:t,value:i._1,datumHash:u}})}r()}))}}var u;r()}))}))}))}))},za=t=>"preprod"===t?"https://cardano-preprod.blockfrost.io/api/v0":"preview"===t?"https://cardano-testnet.blockfrost.io/api/v0":"mainnet"===t?"https://cardano-mainnet.blockfrost.io/api/v0":dt("Blockfrost.apiURL: Unknown network"),Ga=[200,201,202,206],Ha=t=>e=>n=>o=>ka(oa()()(Ua)((()=>{const t=fa((t=>ca((t=>e=>D((()=>{const e=E(t);return t=>e(d("Just",t))})())(e)))(t))(Pa({page:[c(o)]})));return za(e)+"/assets/"+n._1+n._2+"/txs?"+(()=>{if("Just"===t.tag)return t._1;r()})()})())({headers:{project_id:t}})(Ga))((t=>ka(Ba(Do(Q)(t.json)))((t=>Wo(qa(t)))))),$a=t=>e=>n=>o=>ka(oa()()(Ua)(za(n)+"/txs/"+o+"/utxos")({headers:{project_id:e}})(Ga))((e=>ka(Ba(Do(Q)(e.json)))((e=>{const n=(n,o)=>{const i=Na(e),u=(()=>{if("Left"===i.tag){const t=i._1;return e=>C("Left",t)}if("Right"===i.tag){const t=i._1;return e=>e(t)}r()})()((e=>{const i=wi(Wa.decodeJson)(e)(n);return(()=>{if("Left"===i.tag){const t=i._1;return e=>C("Left",t)}if("Right"===i.tag){const t=i._1;return e=>e(t)}r()})()((e=>ja(e)(Da(t)(o))))}));return"Left"===u.tag?C("Left",{type:"jsonDecodeError",value:u._1}):"Right"===u.tag?C("Right",u._1):void r()},i=n("outputs",d("Just",o));return Wo((()=>{if("Left"===i.tag){const t=i._1;return e=>C("Left",t)}if("Right"===i.tag){const t=i._1;return e=>e(t)}r()})()((t=>{const e=n("inputs",m);return(()=>{if("Left"===e.tag){const t=e._1;return e=>C("Left",t)}if("Right"===e.tag){const t=e._1;return e=>e(t)}r()})()((e=>C("Right",{inputs:e,outputs:t})))})))})))),Va="undefined"==typeof module?void 0:module.require,Za=function(){try{return void 0===Va?void 0:Va("util")}catch(t){return}}();!function(){if("undefined"!=typeof performance)performance;else if(Va)try{Va("perf_hooks").performance}catch(t){}}();const Ka=()=>t=>{const e=t.Applicative0();return r=>t.Bind1().bind(e.pure())((()=>{return t=r,void 0!==Za?console.log(Za.inspect(t,{depth:null,colors:!0})):console.log(t),e.pure();var t}))},Qa=(()=>({encodeJson:go(ho.encodeJson)}))(),Ya={reflectSymbol:()=>"index"},Xa=(()=>{const t=wo(mo)(wo(La)(po)({reflectSymbol:()=>"transaction_id"})())(Ya)();return e=>t.gEncodeJson(e)(q)})(),ts=ii(Ur),es=Ka()({Applicative0:()=>ai(Ur),Bind1:()=>ii(Ur)}),rs=(()=>K.foldMap(Su))(),ns=(()=>{const t=wo(ho)(wo(ho)(wo((()=>{const t=wo(yo)(wo(bo(mo))(po)({reflectSymbol:()=>"elems"})())({reflectSymbol:()=>"definite_encoding"})();return{encodeJson:e=>t.gEncodeJson(e)(q)}})())(wo(ho)(wo(ho)(wo(bo((()=>{const t=wo(mo)(wo((()=>{const t=wo(mo)(wo(mo)(po)({reflectSymbol:()=>"steps"})())({reflectSymbol:()=>"mem"})();return{encodeJson:e=>t.gEncodeJson(e)(q)}})())(wo(mo)(wo(mo)(po)({reflectSymbol:()=>"tag"})())(Ya)())({reflectSymbol:()=>"ex_units"})())({reflectSymbol:()=>"data"})();return{encodeJson:e=>t.gEncodeJson(e)(q)}})()))(wo(ho)(po)({reflectSymbol:()=>"vkeys"})())({reflectSymbol:()=>"redeemers"})())({reflectSymbol:()=>"plutus_v2_scripts"})())({reflectSymbol:()=>"plutus_v1_scripts"})())({reflectSymbol:()=>"plutus_data"})())({reflectSymbol:()=>"native_scripts"})())({reflectSymbol:()=>"bootstraps"})();return e=>t.gEncodeJson(e)(q)})(),os={reflectSymbol:()=>"fields"},is={reflectSymbol:()=>"constructor"},us=(()=>{const t=wo(vo)(wo(bo((()=>{const t=wo(mo)(po)({reflectSymbol:()=>"bytes"})();return{encodeJson:e=>t.gEncodeJson(e)(q)}})()))(po)(os)())(is)();return e=>t.gEncodeJson(e)(q)})(),as=bo(ho),ss=(()=>{const t=wo(vo)(wo(as)(po)(os)())(is)();return e=>t.gEncodeJson(e)(q)})(),fs=(()=>si(oi).liftEffect)(),cs=(()=>fi(Ur).throwError)(),ls=(()=>ai(Ur).pure)(),_s=(()=>K.foldMap(Su))(),gs=(()=>{const t=wo(mo)(wo((()=>{const t=wo(mo)(wo(ho)(po)({reflectSymbol:()=>"multiasset"})())({reflectSymbol:()=>"coin"})();return{encodeJson:e=>t.gEncodeJson(e)(q)}})())(wo(ho)(wo(ho)(po)({reflectSymbol:()=>"script_ref"})())({reflectSymbol:()=>"datum_option"})())({reflectSymbol:()=>"amount"})())({reflectSymbol:()=>"address"})();return{encodeJson:e=>t.gEncodeJson(e)(q)}})(),ps=(()=>{const t=wo(ho)(wo((()=>{const t=wo(ho)(wo(ho)(wo((e=ho,{encodeJson:(()=>{const t=D(e.encodeJson);return e=>t(e)})()}))(wo(gs)(wo(mo)(wo(as)(wo(ho)(wo(ho)(wo(bo(gs))(wo(as)(wo(bo(mo))(wo(mo)(wo(mo)(wo(ho)(wo(ho)(wo(ho)(wo(ho)(po)({reflectSymbol:()=>"withdrawals"})())({reflectSymbol:()=>"validity_start_interval"})())({reflectSymbol:()=>"update"})())({reflectSymbol:()=>"ttl"})())({reflectSymbol:()=>"total_collateral"})())({reflectSymbol:()=>"script_data_hash"})())({reflectSymbol:()=>"required_signers"})())({reflectSymbol:()=>"reference_inputs"})())({reflectSymbol:()=>"outputs"})())({reflectSymbol:()=>"network_id"})())({reflectSymbol:()=>"mint"})())({reflectSymbol:()=>"inputs"})())({reflectSymbol:()=>"fee"})())({reflectSymbol:()=>"collateral_return"})())({reflectSymbol:()=>"collateral"})())({reflectSymbol:()=>"certs"})())({reflectSymbol:()=>"auxiliary_data_hash"})();var e;return{encodeJson:e=>t.gEncodeJson(e)(q)}})())(wo(ho)(wo(ho)(po)({reflectSymbol:()=>"witness_set"})())({reflectSymbol:()=>"is_valid"})())({reflectSymbol:()=>"body"})())({reflectSymbol:()=>"auxiliary_data"})();return e=>t.gEncodeJson(e)(q)})(),hs=Ka()(Vi),ds={decodeJson:Si(P)},ms=t=>e=>n=>{const o=hn(m,y,e,n);if("Just"===o.tag){if(Sn((t=>!0),(t=>!1),(t=>!1),(t=>!1),(t=>!1),(t=>!1),o._1))return C("Right",m);const i=t.decodeJson(o._1);if("Left"===i.tag)return C("Left","Could not decode key "+e+yi.show(i._1)+" in an object: "+Tn(gn(n,ho.encodeJson)));if("Right"===i.tag)return C("Right",d("Just",i._1));r()}if("Nothing"===o.tag)return C("Right",m);r()},ys=t=>{const e=function(t,e,r){try{return e(JSON.parse(r))}catch(e){return t(e.message)}}(M,P,t);return"Left"===e.tag?C("Left",l(e._1)):"Right"===e.tag?C("Right",e._1):void r()},vs=t=>e=>r=>n=>{const o=t.encodeJson(r);return mn((t=>()=>(t[e]=o,t)))(n)},bs=t=>e=>{const n=t.decodeJson(e);return"Left"===n.tag?C("Left",yi.show(n._1)):"Right"===n.tag?C("Right",n._1):void r()},ws=void 0,Ts=t=>Ui.bind(tu((t=>t.TransactionUnspentOutput)))((e=>Ui.bind(ru()(ar.input(t)))((e=>Ui.bind(ru()(lr.transaction_id(e)))((n=>Ui.bind(Pi.liftEffect(_r.to_hex(n)))((n=>Ui.bind(ru()(ar.output(t)))((t=>Ui.bind(ru()(fr.amount(t)))((o=>Ui.bind((()=>{const t=ou(o);return e=>{const r=t(e);return()=>{const t=r();return(()=>{const e=Au(t);return"Right"===e.tag?e._1:Su.mempty})()}}})())((o=>Ui.bind(eu()(fr.datum(t)))((i=>Ui.bind(li(i)?Bi.pure(m):Ui.bind(ru()(dr.as_data_hash(i)))((t=>Ui.bind(Pi.liftEffect(mr.to_hex(t)))((t=>Bi.pure(d("Just",t)))))))((i=>Ui.bind(ru()(fr.address(t)))((t=>Ui.bind(Pi.liftEffect(Zt.to_bech32(t)(ws)))((t=>Ui.bind(ru()(lr.index(e)))((e=>Ui.bind(Pi.liftEffect(yr.to_str(e)))((e=>Bi.pure({txOutRef:{txId:n,txIx:(()=>{const t=Jn(e);return"Nothing"===t.tag?0:"Just"===t.tag?t._1:void r()})()},txOut:{address:t,value:o,datumHash:i}}))))))))))))))))))))))))))),Ss=t=>Ui.bind(tu((t=>t.TransactionUnspentOutput)))((e=>Ui.bind(ru()(sr.from_bytes(e)(Ai.J(t))))((t=>Ts(t))))),xs=(()=>ai(rt).pure)(),Ls=(()=>ii(rt).bind)(),Js=(()=>ai(rt).pure)(),Es={reflectSymbol:()=>"getBalance"},Rs={reflectSymbol:()=>"getChangeAddress"},Is={reflectSymbol:()=>"getCollateral"},As={reflectSymbol:()=>"getNetworkId"},Ns={reflectSymbol:()=>"getRewardAddresses"},Os={reflectSymbol:()=>"getUnusedAddresses"},Fs={reflectSymbol:()=>"getUsedAddresses"},ks={reflectSymbol:()=>"getUtxos"},Cs={reflectSymbol:()=>"signData"},Ms={reflectSymbol:()=>"signTx"},Ps={reflectSymbol:()=>"submitTx"},Us=t=>e=>Ho((r=>()=>(Oi((t=>Fi(r(C("Right",C("Right",t)))())),(e=>Fi(r(C("Right",C("Left",t(e))))())),e),ni))),Bs=t=>e=>{const n=hn(m,y,t,e);return"Nothing"===n.tag?C("Left",L(_i("ForeignError","Missing "+t),N)):"Just"===n.tag?C("Right",n._1):void r()},Ws=t=>Ls((t=>"Object"===ci(t)?xs(t):fi(rt).throwError(L(_i("TypeMismatch","Object",ci(t)),N)))(t))((t=>Ls(Bs("info")(t))((e=>Ls(Bs("code")(t))((t=>Ls(gi(rt)("String")(e))((e=>{return Ls((n=rt,t=>{const e=C("Left",L(_i("TypeMismatch","Int",ci(t)),N));return n.Bind1().Apply0().Functor0().map((t=>{if("Left"===t.tag)return e;if("Right"===t.tag){const r=En(t._1);if("Nothing"===r.tag)return e;if("Just"===r.tag)return C("Right",r._1)}r()}))(gi(n)("Number")(t))})(t))((t=>Js({info:e,code:t})));var n})))))))),js=t=>e=>{const r=Yi(t)(e),n=Ki(t)(it(Bi)((t=>{return(e=Ai.J(t),t=>Ui.bind(ji((t=>t.lib)))((r=>Ui.bind(ru()(Kt.from_bytes(r.Address)(e)))((e=>Pi.liftEffect(Zt.to_bech32(e)(t)))))))(ws);var e}))(Ni(e)));return()=>{const t=r(),e=n();return"Nothing"===t.tag?e:t}},qs=t=>-1===t.code?d("Just",{type:"invalidRequest",value:t.info}):-2===t.code?d("Just",{type:"internalError",value:t.info}):-3===t.code?d("Just",{type:"refused",value:t.info}):-4===t.code?d("Just",{type:"accountChange",value:t.info}):m,Ds=t=>{const e=Ws(t);if("Left"===e.tag)return{type:"foreignErrors",value:{value:t,parsingErrors:e._1}};if("Right"===e.tag){const r=qs(e._1);if("Nothing"===r.tag)return{type:"unknownError",value:t};if("Just"===r.tag)return r._1}r()},zs=t=>J((()=>{const e=gi(rt)("Number")(t);return"Left"===e.tag?m:"Right"===e.tag?d("Just",e._1):void r()})(),(()=>{const e=Ws(t);if("Left"===e.tag)return{type:"foreignErrors",value:{value:t,parsingErrors:e._1}};if("Right"===e.tag){const r=qs(e._1);if("Nothing"===r.tag)return{type:"unknownError",value:t};if("Just"===r.tag)return r._1}r()})()),Gs=t=>{const e=Ws(t);if("Left"===e.tag)return{type:"foreignErrors",value:{value:t,parsingErrors:e._1}};if("Right"===e.tag){const o=qs(e._1),i=1===(n=e._1).code?d("Just",{type:"refused",value:n.info}):2===n.code?d("Just",{type:"failure",value:n.info}):m;if("Nothing"===o.tag){if("Nothing"===i.tag)return{type:"unknownError",value:t};if("Just"===i.tag)return i._1;r()}if("Nothing"===o.tag)return{type:"unknownError",value:t};if("Just"===o.tag)return o._1}var n;r()},Hs=t=>{const e=Ws(t);if("Left"===e.tag)return{type:"foreignErrors",value:{value:t,parsingErrors:e._1}};if("Right"===e.tag){const o=qs(e._1),i=1===(n=e._1).code?d("Just",{type:"proofGeneration",value:n.info}):2===n.code?d("Just",{type:"userDeclined",value:n.info}):m;if("Nothing"===o.tag){if("Nothing"===i.tag)return{type:"unknownError",value:t};if("Just"===i.tag)return i._1;r()}if("Nothing"===o.tag)return{type:"unknownError",value:t};if("Just"===o.tag)return o._1}var n;r()},$s=(()=>yt(Et(Es)()({mthFn:t=>t=>u(vt)("getBalance")})()())(yt(Et(Rs)()({mthFn:t=>t=>u(vt)("getChangeAddress")})()())(yt(Et(Is)()({mthFn:t=>t=>a(bt)("getCollateral")})()())(yt(Et(As)()({mthFn:t=>t=>u(vt)("getNetworkId")})()())(yt(Et(Ns)()({mthFn:t=>t=>u(vt)("getRewardAddresses")})()())(yt(Et(Os)()({mthFn:t=>t=>u(vt)("getUnusedAddresses")})()())(yt(Et(Fs)()({mthFn:t=>t=>u(vt)("getUsedAddresses")})()())(yt(Et(ks)()({mthFn:t=>t=>u(vt)("getUtxos")})()())(yt(Et(Cs)()({mthFn:t=>t=>s(wt)("signData")})()())(yt(Et(Ms)()({mthFn:t=>t=>s(wt)("signTx")})()())(yt(Et(Ps)()({mthFn:t=>t=>a(bt)("submitTx")})()())(mt))))))))))).hfoldlWithIndex(Jt)({})(q))(),Vs=(()=>{const t=Do((t=>"Left"===t.tag?C("Left",t._1):"Right"===t.tag?C("Right",No(t._1,m,y)):void r()));return e=>t(zo(Go($s.getUtxos(e)))(Us(zs)))})(),Zs=(()=>{const t=at.traverse(Xo);return e=>r=>t(r)(e)})(),Ks=(()=>{const t=at.traverse(Bi);return e=>r=>t(r)(e)})(),Qs=(()=>{const t=ft(xa);return e=>r=>"Nothing"===e.tag?"Nothing"===r.tag:"Just"===e.tag&&"Just"===r.tag&&t(e._1)(r._1)})(),Ys=Ka()(Ko),Xs=(()=>K.foldMap(du))(),tf=function(t){return function(){console.error(t)}},ef=JSON.stringify,rf=(()=>{const t=at.traverse(Bi);return e=>r=>t(r)(e)})(),nf=(()=>{const t=at.traverse(jr);return e=>r=>t(r)(e)})(),of=Ka()(x),uf=(t,e)=>({tag:t,_1:e}),af=(t,e)=>({tag:t,_1:e}),sf=(t,e,r)=>({tag:t,_1:e,_2:r}),ff=(t,e)=>({tag:t,_1:e}),cf=(()=>{const t=at.traverse(Bi);return e=>r=>t(r)(e)})(),lf={decodeJson:Si(P)},_f=(()=>_a(Ko).bind)(),gf=ii(Ko),pf=t=>e=>Do((e=>"Right"===e.tag?C("Right",e._1):"Left"===e.tag?C("Left",t(e._1)):void r()))(e),hf=(()=>zr(F.foldr))(),df=(()=>ai(Ko).pure)(),mf=(()=>fi(Ko).throwError)(),yf=(()=>(t=>{const e=fi(t);return{catchError:e=>n=>t.Bind1().bind(e)((e=>"Left"===e.tag?n(e._1):"Right"===e.tag?t.Applicative0().pure(C("Right",e._1)):void r())),MonadThrow0:()=>e}})(Ko).catchError)(),vf=uf("Trigger"),bf=uf("WithdrawalTrigger"),wf=uf("PayoutUTxOStatusCheckSuccess"),Tf=t=>uf("BuildTxError",t),Sf=t=>uf("BuildTxSuccess",t),xf=t=>uf("SigningTxSuccess",t),Lf=t=>uf("SubmittingTxError",t),Jf=t=>uf("SubmittingTxSuccess",t),Ef=t=>e=>n=>Do((n=>"Left"===n.tag?t(n._1):"Right"===n.tag?e(n._1):void r()))(n),Rf=t=>e=>n=>o=>{return _f((i=Ko,t=>i.Bind1().bind(t)((t=>i.Applicative0().pure("Left"===t.tag?m:"Right"===t.tag?d("Just",t._1):void r()))))($a(t)(n)(o)(e.txId)))((t=>{const i=t.outputs;return _f(Wo((()=>{const t=(t=>e=>{const n=t.txIx,o=Yr((t=>t.txOutRef.txIx===n))(e);if("Just"===o.tag){const t=e[o._1];if("Just"===t.txOut.datumHash.tag)return C("Right",t.txOut.datumHash._1);if("Nothing"===t.txOut.datumHash.tag)return C("Left",pi("TypeMismatch","DatumHash not found"));r()}return C("Left",pi("TypeMismatch","UTxO not found - invalid index"))})(e)(i);return"Left"===t.tag?m:"Right"===t.tag?d("Just",t._1):void r()})()))((t=>_f((t=>e=>r=>zo(Do(B)(ua()()(Ua)(za(e)+"/scripts/datum/"+r)({headers:{project_id:t}})(Ga)(Ma)))((t=>it(Xo)((t=>Do(Q)(t.json)))(t))))(n)(o)(t))((t=>Wo((()=>{const n=(t=>e=>{const n=t.txIx,o=e.utxos,i=(t=>{const e=lf.decodeJson(t);return(()=>{if("Left"===e.tag){const t=e._1;return e=>C("Left",t)}if("Right"===e.tag){const t=e._1;return e=>e(t)}r()})()((t=>{const e=wi(P)(t)("json_value"),n="Left"===e.tag?C("Left",e._1):"Right"===e.tag?lf.decodeJson(e._1):void r();return(()=>{if("Left"===n.tag){const t=n._1;return e=>C("Left",t)}if("Right"===n.tag){const t=n._1;return e=>e(t)}r()})()((t=>{const e=wi(xi(lf.decodeJson))(t)("fields");return(()=>{if("Left"===e.tag){const t=e._1;return e=>C("Left",t)}if("Right"===e.tag){const t=e._1;return e=>e(t)}r()})()((t=>{if(2===t.length){const e=t[1],n=wi(xn(C("Left",pi("TypeMismatch","String")))(P))(t[0])("bytes"),o=(()=>{if("Left"===n.tag){const t=n._1;return e=>C("Left",t)}if("Right"===n.tag){const t=n._1;return e=>e(t)}r()})()((t=>{const e=Eu(t);return"Nothing"===e.tag?C("Left",pi("TypeMismatch","Invalid policyId")):"Just"===e.tag?C("Right",e._1):void r()}));return(()=>{if("Left"===o.tag){const t=o._1;return e=>C("Left",t)}if("Right"===o.tag){const t=o._1;return e=>e(t)}r()})()((t=>{const n=wi(xn(C("Left",pi("TypeMismatch","String")))(P))(e)("bytes"),o=(()=>{if("Left"===n.tag){const t=n._1;return e=>C("Left",t)}if("Right"===n.tag){const t=n._1;return e=>e(t)}r()})()((t=>{const e=Ni(t);return"Just"===e.tag?C("Right",e._1):C("Left",pi("TypeMismatch","Invalid assetName"))}));return(()=>{if("Left"===o.tag){const t=o._1;return e=>C("Left",t)}if("Right"===o.tag){const t=o._1;return e=>e(t)}r()})()((e=>C("Right",{policyId:t,assetName:e})))}))}return C("Left",pi("TypeMismatch","Invalid RoleTokenInfo"))}))}))}))})(e.datumJson);return(()=>{if("Left"===i.tag){const t=i._1;return e=>C("Left",t)}if("Right"===i.tag){const t=i._1;return e=>e(t)}r()})()((t=>{const e=Yr((t=>t.txOutRef.txIx===n))(o);return"Just"===e.tag?C("Right",{roleToken:t,utxo:o[e._1]}):C("Left",pi("TypeMismatch","UTxO not found - invalid index"))}))})(e)({datumJson:t,utxos:i});return"Left"===n.tag?m:"Right"===n.tag?d("Just",n._1):void r()})())))))}));var i},If=t=>e=>{if("Initializing"===t.tag)return"Trigger"===e.tag?sf("Initializing",t._1,m):"InitializationError"===e.tag?sf("Initializing",t._1,d("Just",e._1)):"InitializationSuccess"===e.tag?sf("FetchingPayoutUTxO",{...t._1,cml:e._1.cml,payoutReferenceInput:e._1.payoutReferenceInput,walletContext:e._1.walletContext},m):"DriverFailed"===e.tag?sf("DriverFailure",e._1):t;if("FetchingPayoutUTxO"===t.tag)return"FetchPayoutUTxOError"===e.tag?sf("FetchingPayoutUTxO",t._1,d("Just",e._1)):"FetchPayoutUTxOSuccess"===e.tag?sf("FindingRoleTokenUTxO",{...Lt("txOutRef")(t._1),payoutUTxO:e._1},m):"DriverFailed"===e.tag?sf("DriverFailure",e._1):t;if("FindingRoleTokenUTxO"===t.tag)return"FindRoleTokenUTxOError"===e.tag?sf("FindingRoleTokenUTxO",t._1,d("Just",e._1)):"FindRoleTokenUTxOSuccess"===e.tag?sf("PayoutUTxOStatusChecking",{...t._1,roleTokenUTxO:e._1},m):"DriverFailed"===e.tag?sf("DriverFailure",e._1):t;if("PayoutUTxOStatusChecking"===t.tag)return"PayoutUTxOStatusCheckError"===e.tag?sf("PayoutUTxOStatusChecking",t._1,d("Just",e._1)):"PayoutUTxOStatusCheckSuccess"===e.tag?sf("AwaitingWithdrawalTrigger",t._1):"DriverFailed"===e.tag?sf("DriverFailure",e._1):t;if("AwaitingWithdrawalTrigger"===t.tag)return"WithdrawalTrigger"===e.tag?sf("GrabbingCollateralUTxOs",t._1,m):"DriverFailed"===e.tag?sf("DriverFailure",e._1):t;if("GrabbingCollateralUTxOs"===t.tag)return"GrabCollateralUTxOsError"===e.tag?sf("GrabbingCollateralUTxOs",t._1,d("Just",e._1)):"GrabCollateralUTxOsSuccess"===e.tag?sf("BuildingTx",{...t._1,collateralUTxOs:e._1},m):"DriverFailed"===e.tag?sf("DriverFailure",e._1):t;if("BuildingTx"===t.tag)return"BuildTxError"===e.tag?sf("BuildingTx",t._1,d("Just",e._1)):"BuildTxSuccess"===e.tag?sf("SigningTx",{tx:e._1,wallet:t._1.wallet,walletContext:t._1.walletContext,network:t._1.network,payoutReferenceInput:t._1.payoutReferenceInput,cml:t._1.cml,blockfrostProjectId:t._1.blockfrostProjectId},m):"DriverFailed"===e.tag?sf("DriverFailure",e._1):t;if("SigningTx"===t.tag)return"SigningTxError"===e.tag?sf("SigningTx",t._1,d("Just",e._1)):"SigningTxSuccess"===e.tag?sf("SubmittingTx",{...t._1,txWitnessSet:e._1},m):"DriverFailed"===e.tag?sf("DriverFailure",e._1):t;if("SubmittingTx"===t.tag){if("SubmittingTxError"===e.tag)return sf("SubmittingTx",t._1,d("Just",e._1));if("SubmittingTxSuccess"===e.tag)return sf("TxCreated",e._1)}return"DriverFailed"===e.tag?sf("DriverFailure",e._1):t},Af=t=>{if("Initializing"===t.tag){if("Nothing"===t._2.tag){const e=t._1;return d("Just",zo(Qi)((t=>{if("Just"===t.tag){const o=t._1;return zo((n=o,t=>zo((t=>e=>{return zo((n=e,zo(Go($s.getBalance(n)))(Us(Ds))))((e=>{return"Right"===e.tag?Go(Ki(t)((n=Ai.J(e._1),Ui.bind(ji((t=>t.lib)))((t=>Ui.bind(ru()(or.from_bytes(t.Value)(n)))((t=>ou(t)))))))):"Left"===e.tag?Wo(Wn):void r();var n}));var n})(n)(t))((e=>zo((t=>e=>{return zo((n=e,zo(Go($s.getUsedAddresses(n)))(Us(Ds))))((n=>zo(Vs(e))((e=>{const o="Left"===e.tag?C("Left",e._1):"Right"===e.tag?C("Right","Nothing"===e._1.tag?[]:"Just"===e._1.tag?e._1._1:void r()):void r(),i="Right"===o.tag?o._1:[],u="Right"===n.tag?n._1:[];return zo(Go(Ki(t)(Ui.bind(tu((t=>t.TransactionUnspentOutput)))((t=>rf(i)((e=>Ui.bind(ru()(sr.from_bytes(t)(Ai.J(e))))((t=>Ui.bind(ru()(ar.output(t)))((t=>Ui.bind(ru()(fr.address(t)))((t=>Pi.liftEffect(Zt.to_bech32(t)(ws)))))))))))))))((e=>zo(Go((()=>{const e=nf(u)((e=>js(t)(e)));return()=>{const t=e();return tn((t=>t))(t)}})()))((t=>Wo(Qr(pt.compare)([...e,...t]))))))}))));var n})(n)(t))((o=>zo((t=>e=>{return zo((r=e,zo(Go($s.getChangeAddress(r)))(Us(Ds))))((e=>"Right"===e.tag?Go(js(t)(e._1)):Wo(m)));var r})(n)(t))((t=>Wo((()=>{if("Just"===t.tag){const n=of(e);if("Just"===n.tag){const n=Au(e),i=of("Balance:");if("Just"===i.tag){const e=of(n);if("Just"===e.tag){if("Left"===n.tag)return m;if("Right"===n.tag)return d("Just",{balance:n._1,changeAddress:t._1,usedAddresses:o});r()}if("Nothing"===e.tag)return m;r()}if("Nothing"===i.tag)return m;r()}if("Nothing"===n.tag)return m;r()}if("Nothing"===t.tag)return m;r()})()))))))))(e.wallet))((t=>{if("Just"===t.tag){const i="mainnet"===(n=e.network)?d("Just",{txId:"672399f7d551d6e06fda70769f830e4e3783495c6250567c6ae97ecc788ad5a4",txIx:2}):"preprod"===n?d("Just",{txId:"9a8a6f387a3330b4141e1cb019380b9ac5c72151c0abc52aa4266245d3c555cd",txIx:2}):"preview"===n?d("Just",{txId:"69bfdb7cd911e930bfa073a8c45121e7690939d7680196181731d0dd609ecb73",txIx:2}):m;if("Just"===i.tag)return Wo(uf("InitializationSuccess",{walletContext:t._1,payoutReferenceInput:i._1,cml:o}));if("Nothing"===i.tag)return Wo(uf("InitializationError","Failed to initialize payout reference input"));r()}var n;if("Nothing"===t.tag)return Wo(uf("InitializationError","Failed to initialize wallet context"));r()}))}var n;if("Nothing"===t.tag)return Wo(uf("InitializationError","Failed to import CML"));r()})))}return m}if("FetchingPayoutUTxO"===t.tag)return"Nothing"===t._2.tag?d("Just",Do((t=>"Nothing"===t.tag?uf("FetchPayoutUTxOError","UTxO not found or parsing failed"):"Just"===t.tag?uf("FetchPayoutUTxOSuccess",t._1):void r()))(Rf(t._1.cml)(t._1.txOutRef)(t._1.blockfrostProjectId)(t._1.network))):m;if("FindingRoleTokenUTxO"===t.tag)return"Nothing"===t._2.tag?d("Just",(()=>{const e=t._1.payoutUTxO.roleToken;return zo((n=t._1.cml,t=>e=>{const o=t.assetName,i=t.policyId;return zo(Vs(e))((t=>{const e="Left"===t.tag?C("Left",t._1):"Right"===t.tag?C("Right","Nothing"===t._1.tag?[]:"Just"===t._1.tag?t._1._1:void r()):void r(),u="Right"===e.tag?e._1:[];return Go(Ki(n)(Ui.bind(tu((t=>t.TransactionUnspentOutput)))((t=>{const e=cf(u)((e=>Ui.bind(ru()(sr.from_bytes(t)(Ai.J(e))))((t=>Ui.bind(ru()(ar.output(t)))((e=>Ui.bind(ru()(fr.amount(e)))((e=>Ui.bind((()=>{const t=ou(e);return e=>{const r=t(e);return()=>{const t=r();return(()=>{const e=Au(t);return"Right"===e.tag?e._1:Su.mempty})()}}})())((e=>{if("GT"===Ao(Lu(e)(su("AssetId",i,o)))(Ro.zero)){const e=Ts(t);return t=>{const r=e(t);return()=>{const t=r();return d("Just",t)}}}return Bi.pure(m)}))))))))));return t=>{const r=e(t);return()=>{const t=r();return Kr(tn((t=>t))(t))(0)}}}))))}))})(e)(t._1.wallet))((t=>{return"Nothing"===t.tag?Wo(uf("FindRoleTokenUTxOError","Role token not found{ assetName: "+l((n=e).assetName)+", policyId: "+l(n.policyId)+" }")):"Just"===t.tag?Wo(uf("FindRoleTokenUTxOSuccess",t._1)):void r();var n}));var n})()):m;if("GrabbingCollateralUTxOs"===t.tag)return"Nothing"===t._2.tag?d("Just",zo((e=t._1.cml,t=>n=>{const o=zo(Vs(n))((t=>Go(Ki(e)((()=>{const e=$r((t=>Ju(t.txOut.value))),n=Ks((()=>{if("Left"===t.tag)return[];if("Right"===t.tag){if("Nothing"===t._1.tag)return[];if("Just"===t._1.tag)return t._1._1}r()})())((t=>Ss(t)));return t=>{const r=n(t);return()=>{const t=r();return e(t)}}})()))));return zo(zo(qo(zo(Go(Ki(e)(Ui.bind((i=t,Ui.bind(ji((t=>t.lib)))((t=>Ui.bind(ru()(vr.from_str(t.BigNum)(Eo(i))))((t=>Pi.liftEffect(yr.to_bytes(t))))))))((t=>Bi.pure(Ai.c(t)))))))((t=>zo(Do(B)((t=>{const e=Do((t=>"Left"===t.tag?C("Left",t._1):"Right"===t.tag?C("Right",(()=>{const e=No(t._1,m,y);return"Nothing"===e.tag?[]:"Just"===e.tag?e._1:void r()})()):void r())),n=$s.getCollateral(t);return t=>e(zo(Go(n(t)))(Us(Ds)))})(n)(t)))((t=>it(Xo)((t=>Zs(t)((t=>Go(Ki(e)(Ss(t)))))))(t))))))((t=>Wo(d("Just",[])))))((t=>Qs(t)(d("Just",[]))?Do(y)(o):Wo(t))))((e=>{const r=H((e=>r=>"GT"===Ao(r.total)(t)?r:{utxos:[e,...r.utxos],total:Jo(r.total)(Lu(e.txOut.value)(gu))}))({utxos:[],total:Ro.zero}),n=Zr((t=>e=>Ao(Lu(t.txOut.value)(gu))(Lu(e.txOut.value)(gu)))),o=$r((t=>Ju(t.txOut.value))),i="Just"===e.tag?d("Just",r(n(o(e._1))).utxos):m;return zo(Ys((()=>{const t=Xs((t=>Lu(t.txOut.value)(gu)));return"Just"===i.tag?d("Just",t(i._1)):m})()))((()=>Wo(i)))}));var i})((()=>{const t=Io("2000000");return"Just"===t.tag?t._1:dt("twoAdaInLovelace")})())(t._1.wallet))((t=>"Just"===t.tag?t._1.length>0?Wo(uf("GrabCollateralUTxOsSuccess",t._1)):Wo(uf("GrabCollateralUTxOsError","Collateral UTxOs not found")):"Nothing"===t.tag?Wo(uf("GrabCollateralUTxOsError","Collateral UTxOs not found")):void r()))):m;var e,n;if("PayoutUTxOStatusChecking"===t.tag)return"Nothing"===t._2.tag?d("Just",Do((t=>"Left"===t.tag?uf("PayoutUTxOStatusCheckError",t._1):"Right"===t.tag?wf:void r()))((()=>{const e=t._1.blockfrostProjectId,n=t._1.cml,o=t._1.network,i=t._1.payoutUTxO.utxo.txOutRef.txId;return gf.bind(pf((t=>af("PayoutUTxOStatusCheckingError",ef(t))))(gf.bind(Do((t=>{return"Left"===t.tag?C("Left",t._1):"Right"===t.tag?C("Right",(e=t._1,hf(e).slice().reverse())):void r();var e}))((u=Ha(e)(o)(fu(t._1.payoutUTxO.roleToken.policyId,t._1.payoutUTxO.roleToken.assetName)),t=>e=>{const n=e=>o=>ka(u(o))((i=>{if(0===i.length)return Ra.pure(e);const u=H((e=>n=>"StopFolding"===n.tag?n:"Continue"===n.tag?t(n._1)(e):void r()))(Ea("Continue",e))(i);return"StopFolding"===u.tag?Ra.pure(u._1):"Continue"===u.tag?n(u._1)(o+1|0):void r()}));return n(e)(1)})((t=>e=>Ea("Continue",A("Cons",e,t))))(N)))((t=>{return(u=m,t=>e=>$((t=>r=>ii(Ko).bind(t)((t=>e(t)(r)))))(ai(Ko).pure(u))(t))(t)((t=>u=>"Just"===t.tag?df(d("Just",t._1)):"Nothing"===t.tag?gf.bind($a(n)(e)(o)(u))((t=>{return(e=t=>t.txOutRef.txId===i,function(t){for(var r=t.length,n=0;n<r;n++)if(e(t[n]))return!0;return!1})(t.inputs)?df(d("Just",u)):df(m);var e})):void r()));var u}))))((t=>"Just"===t.tag?mf(af("PayoutUTxOAlreadySpent",t._1)):"Nothing"===t.tag?df():void r()));var u})())):m;if("BuildingTx"===t.tag)return"Nothing"===t._2.tag?d("Just",Ef(Tf)(Sf)((()=>{const e=t._1.payoutUTxO.utxo,n=t._1.cml,o=t._1.collateralUTxOs,i=t._1.roleTokenUTxO,u=t._1.payoutReferenceInput,a=t._1.walletContext.changeAddress,s=fu(t._1.payoutUTxO.roleToken.policyId,t._1.payoutUTxO.roleToken.assetName);return gf.bind((l=Go((f=n,t=>Ki(f)(Ui.bind(tu((t=>t.Address)))((e=>Ui.bind(ru()(Kt.from_bech32(e)(t)))((t=>Ui.bind(eu()(Zt.payment_cred(t)))((t=>{const e=it(Bi)((t=>Ui.bind(eu()(Vt.to_keyhash(t)))((t=>it(Bi)((t=>Pi.liftEffect(oe.to_hex(t))))(li(t)?m:d("Just",t))))))(li(t)?m:d("Just",t));return t=>{const n=e(t);return()=>{const t=n();return"Just"===t.tag?t._1:"Nothing"===t.tag?m:void r()}}}))))))))(a)),t=>Do((e=>"Nothing"===e.tag?C("Left",t):"Just"===e.tag?C("Right",e._1):void r()))(l))("bech32 to hash conversion failed"))((t=>{return Go((f=n,t=>e=>n=>o=>i=>ts.bind((t=>e=>n=>o=>i=>u=>{const a=o.collaterals,s=[...a,o.roleToken,o.payout],f=o.payout.txOutRef,l=Yr((t=>t.txId===f.txId&&t.txIx===f.txIx))(Zr(Sa)(D((t=>t.txOutRef))(s))),_="Nothing"===l.tag?0:"Just"===l.tag?l._1:void r(),g=D((t=>Xa({transaction_id:t.txOutRef.txId,index:c(t.txOutRef.txIx)})))(s),p=xo(5e5);return ts.bind(es("totalCollateral"))((()=>ts.bind(es("750000"))((()=>ts.bind((()=>{const t=xu(rs((t=>t.txOut.value))(s))(Un("Two",Wn,gu,p,Wn)),e=Lu(t)(gu),n=Au(Qn(pt)("")(Ru(t))),o=(()=>{if("Left"===n.tag){const t=n._1;return e=>C("Left",t)}if("Right"===n.tag){const t=n._1;return e=>e(t)}r()})()((t=>C("Right",{coin:Eo(e),multiasset:vu.eq(t)(Su.mempty)?wn:Iu(t)})));return()=>o})())((o=>{const s=ns({vkeys:"Nothing"===u.tag?wn:"Just"===u.tag?u._1:void r(),native_scripts:wn,bootstraps:wn,plutus_v1_scripts:wn,plutus_data:{elems:D((t=>Tn(us(t))))([{constructor:0,fields:[{bytes:n._1},{bytes:n._2}]}]),definite_encoding:!0},redeemers:[{tag:"Spend",index:c(_),data:Tn(ss({constructor:0,fields:[]})),ex_units:{mem:"3237238",steps:"809068390"}}],plutus_v2_scripts:wn});return ts.bind(ts.bind(fs(Ki(t)(Ui.bind((t=>Ui.bind(tu((t=>t.TransactionWitnessSet)))((e=>ru()(ur.from_json(e)(Tn(t))))))(s))((t=>{return e=t,Ui.bind(nu)((t=>Ui.bind(Pi.liftEffect(ir.redeemers(e)))((r=>Ui.bind(Pi.liftEffect(ir.plutus_data(e)))((e=>it(Bi)((r=>Ui.bind(tu((t=>t.hash_script_data)))((n=>Ui.bind(ru()((()=>{const o=t.pv2;return()=>n(r,o,e)})()))((t=>Pi.liftEffect(pr.to_hex(t))))))))(li(r)?m:d("Just",r))))))));var e})))))((t=>"Nothing"===t.tag?cs("Could not compute script data hash"):"Just"===t.tag?ls(t._1):void r())))((t=>ts.bind((()=>{const t=xu(_s((t=>t.txOut.value))(a))(Un("Two",Wn,gu,xo(75e4),Wn)),e=Lu(t)(gu),n=Au(Qn(pt)("")(Ru(t))),o=(()=>{if("Left"===n.tag){const t=n._1;return e=>C("Left",t)}if("Right"===n.tag){const t=n._1;return e=>e(t)}r()})()((t=>C("Right",{coin:Eo(e),multiasset:vu.eq(t)(Su.mempty)?wn:Iu(t)})));return()=>o})())((r=>ls(ps({body:{inputs:g,outputs:[{address:e.bech32,amount:o,datum_option:wn,script_ref:wn}],fee:Eo(p),collateral:D((t=>Xa({transaction_id:t.txOutRef.txId,index:c(t.txOutRef.txIx)})))(a),required_signers:[e.pubKeyHash],network_id:wn,total_collateral:"750000",collateral_return:{address:e.bech32,amount:r,datum_option:wn,script_ref:wn},reference_inputs:[Xa({transaction_id:i.txId,index:c(i.txIx)})],script_data_hash:t,ttl:wn,certs:wn,withdrawals:wn,update:wn,auxiliary_data_hash:wn,validity_start_interval:wn,mint:wn},witness_set:s,is_valid:!0,auxiliary_data:wn}))))))}))))))})(f)(t)(e)(n)(o)(i))((t=>{const e=Ki(f)(Ui.bind(tu((t=>t.Transaction)))((e=>Ui.bind(ru()(gr.from_json(e)(Tn(t))))((t=>Ui.bind(Pi.liftEffect(cr.to_bytes(t)))((e=>Ui.bind(Pi.liftEffect(cr.to_json(t)))((t=>Ui.bind(hs(t))((()=>Bi.pure(Ai.c(e)))))))))))));return()=>{const t=e();return C("Right",t)}})))({bech32:a,pubKeyHash:t})(s)({collaterals:o,roleToken:i,payout:e})(u)(m));var f}));var f,l})())):m;if("SigningTx"===t.tag)return"Nothing"===t._2.tag?d("Just",Ef((t=>uf("SigningTxError",{tag:"SignTxOperationError",_1:t})))(xf)((n=t._1.wallet,t=>{const e=$s.signTx(n)(t);return t=>zo(Go(e(t)))(Us(Hs))})(t._1.tx)(!0))):m;if("SubmittingTx"===t.tag){if("Nothing"===t._2.tag){const e=t._1;return d("Just",(()=>{const t=e.blockfrostProjectId;return Ef(Lf)(Jf)(gf.bind(pf((t=>ff("WitnessKeySetupFailed",ef(t))))(Go((n=e.cml,t=>e=>{const o=Ki(n)(Ui.bind(tu((t=>t.Transaction)))((t=>Ui.bind(ru()(gr.from_bytes(t)(Ai.J(e))))((t=>Pi.liftEffect(cr.to_json(t)))))));return ts.bind(fs(Ki(n)(Ui.bind(tu((t=>t.TransactionWitnessSet)))((e=>Ui.bind(ru()(ur.from_bytes(e)(Ai.J(t))))((t=>Pi.liftEffect(ir.to_json(t)))))))))((t=>ts.bind(fs(o))((e=>ts.bind((()=>{const n=ys(e),o=(()=>{if("Left"===n.tag){const t=n._1;return e=>C("Left",t)}if("Right"===n.tag){const t=n._1;return e=>e(t)}r()})()((e=>{const n=ys(t);return(()=>{if("Left"===n.tag){const t=n._1;return e=>C("Left",t)}if("Right"===n.tag){const t=n._1;return e=>e(t)}r()})()((t=>{const n=bs(ds)(e);return(()=>{if("Left"===n.tag){const t=n._1;return e=>C("Left",t)}if("Right"===n.tag){const t=n._1;return e=>e(t)}r()})()((e=>{const n=bs(ds)(t),o=(()=>{if("Left"===n.tag){const t=n._1;return e=>C("Left",t)}if("Right"===n.tag){const t=n._1;return e=>e(t)}r()})()((t=>{const e=ms({decodeJson:xi(P)})("vkeys")(t);return"Left"===e.tag?C("Left",e._1):"Right"===e.tag?C("Right","Nothing"===e._1.tag?[]:"Just"===e._1.tag?e._1._1:void r()):void r()}));return(()=>{if("Left"===o.tag){const t=o._1;return e=>C("Left",t)}if("Right"===o.tag){const t=o._1;return e=>e(t)}r()})()((t=>{const n=(o=ds,t=>e=>{const n=hn(m,y,t,e);if("Just"===n.tag){const i=o.decodeJson(n._1);if("Left"===i.tag)return C("Left","Could not decode key "+t+yi.show(i._1)+" in an object: "+Tn(gn(e,ho.encodeJson)));if("Right"===i.tag)return C("Right",i._1);r()}if("Nothing"===n.tag)return C("Left","Could not find key "+t+"in an object: "+Tn(gn(e,ho.encodeJson)));r()})("witness_set")(e);var o;return(()=>{if("Left"===n.tag){const t=n._1;return e=>C("Left",t)}if("Right"===n.tag){const t=n._1;return e=>e(t)}r()})()((n=>{const o=ms({decodeJson:xi(P)})("vkeys")(n);return"Left"===o.tag?C("Left",o._1):"Right"===o.tag?C("Right",gn(vs(Qa)("witness_set")(vs(as)("vkeys")([..."Nothing"===o._1.tag?[]:"Just"===o._1.tag?o._1._1:void r(),...t])(n))(e),ho.encodeJson)):void r()}))}))}))}))})),i="Left"===o.tag?C("Left","Witness set update failed on Json operations: "+o._1):"Right"===o.tag?C("Right",o._1):void r();return()=>i})())((t=>ts.bind(fs(Ki(n)(Ui.bind(tu((t=>t.Transaction)))((e=>Ui.bind(ru()(gr.from_json(e)(Tn(t))))((t=>Pi.liftEffect(cr.to_bytes(t)))))))))((t=>ls(Ai.c(t))))))))))})(e.txWitnessSet)(e.tx))))((n=>{const o=gf.bind(pf((t=>ff("BlockfrostSubmitTxError",{msg:"Fetching error",info:ia(t)})))((t=>e=>r=>zo(Ca(za(e)+"/tx/submit")({headers:{project_id:t,"Content-Type":"application/cbor"},body:Ai.J(r),method:Uu})(Ga)(Ma))((t=>ut(Xo)((t=>Do(Q)(t.json)))(t))))(t)(e.network)(n)))((t=>gf.bind(Wo((()=>{const e=Ja(t);return"Left"===e.tag?C("Left",ff("BlockfrostSubmitTxError",{msg:"Response parsing failed",info:t})):"Right"===e.tag?C("Right",e._1):void r()})()))((t=>df(t)))));return yf(gf.bind(pf((t=>ff("WalletSubmitTxError",{msg:"Wallet error",info:t})))((t=>{const e=$s.submitTx(t);return t=>zo(Go(e(t)))(Us(Gs))})(e.wallet)(n)))((t=>df(t))))((t=>gf.bind(si(ti).liftEffect(tf("wallet submission failed:")))((()=>gf.bind(si(ti).liftEffect(tf(ef(t))))((()=>gf.bind(si(ti).liftEffect(tf("trying blockfrost submission...")))((()=>o))))))))})));var n})())}return m}return m},Nf=t=>{const e=Af(t);return"Just"===e.tag?d("Just",qo(e._1)((e=>Wo(uf("DriverFailed",{state:t,error:e}))))):m},Of=(Ff={default:()=>e.default},kf={},o.d(kf,Ff),kf);var Ff,kf;Of.default.createElement,Of.default.Fragment;const Cf=(t,e)=>{const r=Of.default.useRef(e);return r.current===e||t(r.current,e)||(r.current=e),r.current};function Mf(t,e){const[r,n]=Of.default.useState("function"==typeof e?()=>e:e);return n.hasOwnProperty("$$reactBasicHooks$$cachedSetState")||(n.$$reactBasicHooks$$cachedSetState=t=>()=>n(t)),t(r,n.$$reactBasicHooks$$cachedSetState)}function Pf(t,e,r){const n=Cf(t,e);Of.default.useEffect(r,[n])}Of.default.memo,Of.default.memo;const Uf=Of.default.useRef;function Bf(t){return t.current}function Wf(t,e){t.current=e}Of.default.useContext,Of.default.useDebugValue,Of.default.useId,Of.default.useDeferredValue,Of.default.useSyncExternalStore,Of.default.useSyncExternalStore;const jf=u(Wf),qf=n(Bf),Df={map:t=>e=>()=>{const r=e();return t(r)}},zf=t=>{const e={apply:t=>e=>()=>t()(e()),Functor0:()=>Df};return{pure:t=>()=>t,Apply0:()=>e}},Gf=Uo(ri),Hf=t=>e=>n=>o=>()=>{const i=Mf(((t,e)=>J(t,e)),m),u=i._2(e);if(Pf(((e,r)=>t.eq(e)(r)),n,(()=>{u();const t=$o(Zo,zo(Gf(o))((t=>Go(i._2((e=>d("Just",t)))))))();t.run();const e=$o(Zo,(r=Fo("Stale request cancelled"),t=>zo(Go(t.isSuspended))((e=>e?Go((()=>{const e=t.kill(r,(t=>()=>{}));return()=>{e()}})()):Ho((e=>{const n=t.kill(r,e);return()=>{const t=n();return(()=>{const e=Go(t);return t=>e})()}})))))(t));var r;return()=>{e().run()}})),"Just"===i._1.tag){if("Left"===i._1._1.tag)return Mo(i._1._1._1)();if("Right"===i._1._1.tag)return d("Just",i._1._1._1);r()}if("Nothing"===i._1.tag)return m;r()},$f=(()=>zf().pure)(),Vf=t=>{const e=(t=>()=>{const e=function(t,e,r){const n=Cf(((t,e)=>!0),void 0);return Of.default.useMemo((t=>({value:0})),[n])}(),r=Mf(((t,e)=>J(t,e)),{version:0,state:t});return $f(J(r._1,(t=>()=>{const n=e.value,o=e.value=n+1|0;return r._2((e=>({version:o,state:t(e.state)})))()})))()})(t);return()=>{const t=e();return $f(J(t._1,(e=>t._2((t=>e)))))()}},Zf=t=>e=>r=>()=>{const n=Uf(r),o=jf(n)(r);return Pf(((e,r)=>t.eq(e)(r)),e,(()=>(o(),()=>{}))),$f(n)()},Kf=(()=>zf().pure)(),Qf=(t,e)=>({tag:t,_1:e}),Yf=(()=>{const t=wo(ho)(wo(mo)(wo(mo)(po)({reflectSymbol:()=>"tag"})())({reflectSymbol:()=>"msg"})())({reflectSymbol:()=>"info"})();return e=>t.gEncodeJson(e)(q)})(),Xf=t=>t,tc=(()=>zf().pure)(),ec=function(t){return(t=>{const e=(t=>{const e=Vf(t);return()=>{const n=e(),o=Zf(lt)(n._1.version)(n._1.state)(),i=Vf(t.initialState)(),u=Zf(lt)(i._1.version)(i._1.state)(),a=Vf(m)(),s=Zf(lt)(a._1.version)(a._1.state)(),f=(t,e,r)=>{const n=r.step(e)(t),o=r.driver(n),u=i._2(n);return()=>(u(),a._2(o)())},c=t=>{const e=qf(u);return()=>{const r=e(),n=qf(o)();return f(t,r,n)()}};return Hf(lt)((t=>m))(a._1.version)(zo(Go(qf(s)))((t=>"Nothing"===t.tag?Wo():"Just"===t.tag?zo(t._1)((t=>Go(c(t)))):void r())))(),Kf({state:i._1.state,output:n._1.state.output(i._1.state),applyAction:t=>c(t),reset:t=>{const e=qf(o);return()=>{const o=e(),u="Nothing"===t.tag?o:"Just"===t.tag?t._1:void r();return n._2(u)(),i._2(u.initialState)(),a._2(m)(),t=>f(t,u.initialState,u)}}})()}})({initialState:sf("Initializing",t,m),driver:Nf,output:Xf,step:If});return()=>{const t=e(),n=t.applyAction(vf);return Pf(((t,e)=>!0),void 0,(()=>(n(),()=>{}))),tc({status:(o=(i=t.applyAction(bf),t=>{if("Initializing"===t.tag){if("Nothing"===t._2.tag)return Qf("Initializing","Setup");if("Just"===t._2.tag)return Qf("InitializationFailed",{tag:"InitializeError",msg:t._2._1,info:wn});r()}if("FetchingPayoutUTxO"===t.tag){if("Nothing"===t._2.tag)return Qf("Initializing","FetchingPayoutUTxO");if("Just"===t._2.tag)return Qf("InitializationFailed",{tag:"FetchPayoutUTxOError",msg:t._2._1,info:wn});r()}if("FindingRoleTokenUTxO"===t.tag){if("Nothing"===t._2.tag)return Qf("Initializing","FindingRoleTokenUTxO");if("Just"===t._2.tag)return Qf("InitializationFailed",{tag:"FindRoleTokenUTxOError",msg:t._2._1,info:wn});r()}if("PayoutUTxOStatusChecking"===t.tag){if("Nothing"===t._2.tag)return Qf("Initializing","PayoutUTxOStatusChecking");if("Just"===t._2.tag)return Qf("InitializationFailed","PayoutUTxOStatusCheckingError"===t._2._1.tag?{tag:"PayoutUTxOStatusCheckError",msg:t._2._1._1,info:wn}:"PayoutUTxOAlreadySpent"===t._2._1.tag?{tag:"PayoutUTxOAlreadySpentError",msg:"Payout UTxO already spent",info:t._2._1._1}:void r());r()}if("AwaitingWithdrawalTrigger"===t.tag)return Qf("AwaitingWithdrawalTrigger",i);if("GrabbingCollateralUTxOs"===t.tag){if("Nothing"===t._2.tag)return Qf("ProcessingWithdrawal","GrabbingCollateralUTxOs");if("Just"===t._2.tag)return Qf("WithdrawalFailed",{error:{tag:"GrabCollateralUTxOsError",msg:t._2._1,info:wn},retry:i});r()}if("BuildingTx"===t.tag){if("Nothing"===t._2.tag)return Qf("ProcessingWithdrawal","BuildingTx");if("Just"===t._2.tag)return Qf("WithdrawalFailed",{error:{tag:"BuildTxError",msg:t._2._1,info:wn},retry:i});r()}if("SigningTx"===t.tag){if("Nothing"===t._2.tag)return Qf("ProcessingWithdrawal","SigningTx");if("Just"===t._2.tag)return Qf("WithdrawalFailed",{error:"UserAborted"===t._2._1.tag?{tag:"UserAbortedError",msg:"User aborted signing operation",info:wn}:"SignTxOperationError"===t._2._1.tag?{tag:"SignTxOperationError",msg:"Some error occured while signing the transaction",info:t._2._1._1}:void r(),retry:i});r()}if("SubmittingTx"===t.tag){if("Nothing"===t._2.tag)return Qf("ProcessingWithdrawal","SubmittingTx");if("Just"===t._2.tag)return Qf("WithdrawalFailed",{retry:i,error:"WalletSubmitTxError"===t._2._1.tag?{tag:"WalletSubmitTxError",msg:t._2._1._1.msg,info:t._2._1._1.info}:"WitnessKeySetupFailed"===t._2._1.tag?{tag:"WitnessKeySetupFailed",msg:t._2._1._1,info:wn}:"BlockfrostSubmitTxError"===t._2._1.tag?{tag:"BlockfrostSubmitTxError",msg:t._2._1._1.msg,info:t._2._1._1.info}:void r()});r()}return"TxCreated"===t.tag?Qf("WithdrawalSucceeded",t._1):"DriverFailure"===t.tag?Qf("FatalError",{tag:"FatalError",info:Ou(t._1.error),msg:"An unhandled exception during execution with internal state: "+ef(t._1.state)}):void r()})(t.state),"Initializing"===o.tag?{status:"Initializing",step:o._1}:"InitializationFailed"===o.tag?{status:"InitializationFailed",error:Yf(o._1)}:"AwaitingWithdrawalTrigger"===o.tag?{status:"AwaitingWithdrawalTrigger",trigger:o._1}:"ProcessingWithdrawal"===o.tag?{status:"ProcessingWithdrawal",msg:o._1}:"WithdrawalFailed"===o.tag?{status:"WithdrawalFailed",error:Yf(o._1.error),retry:o._1.retry}:"WithdrawalSucceeded"===o.tag?{status:"WithdrawalSucceeded",txId:o._1}:"FatalError"===o.tag?{status:"FatalError",error:Yf(o._1)}:void r()),reset:e=>{const r=t.reset(d("Just",{initialState:sf("Initializing",e,m),driver:Nf,output:Xf,step:If}));return()=>{r()(vf)()}}})();var o,i}})(t)()}})();var u=i.J;export{u as useWithdrawal};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,